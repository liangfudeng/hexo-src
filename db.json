{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/lingpaitong.PNG","path":"images/lingpaitong.PNG","modified":0,"renderable":0},{"_id":"source/images/lingpaitong1.JPG","path":"images/lingpaitong1.JPG","modified":0,"renderable":0},{"_id":"source/images/lingpaitong2.JPG","path":"images/lingpaitong2.JPG","modified":0,"renderable":0},{"_id":"source/images/lptfp.PNG","path":"images/lptfp.PNG","modified":0,"renderable":0},{"_id":"source/images/title.jpg","path":"images/title.jpg","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/lingpaitong3.jpg","path":"images/lingpaitong3.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":0},{"_id":"source/images/xx.jpg","path":"images/xx.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/lingpaitong_rs.jpg","path":"images/lingpaitong_rs.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1515568682056},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1515567156451},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1515567156451},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1515567156452},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1515567156455},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1515567156455},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1515567156456},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1515567156456},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1515567156457},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1515567156457},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1515567156458},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1515567156458},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1515567156459},{"_id":"themes/next/_config.yml","hash":"7e16bccf7a37d93f28c18b366b805c3fe5216499","modified":1515570244394},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1515567156461},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1515567156461},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1515567156521},{"_id":"source/_posts/c语言构造函数.md","hash":"320a8d6d872bb0c75511396cdd05343795fe6271","modified":1515572536315},{"_id":"source/_posts/dpvs源码分析（三）之网络层.md","hash":"3ea3a991007cd060e9c13229cb464785d7f9d943","modified":1517386984269},{"_id":"source/_posts/dpvs源码分析（一）之启动过程.md","hash":"1e3145a76f8666542551178a5f5a71a2bd290b13","modified":1516245812568},{"_id":"source/_posts/dpvs源码分析（二）之链路层.md","hash":"87084d4f3235c9ca8d7998ca2f254d68d5e7e138","modified":1517213314755},{"_id":"source/_posts/lsa.md","hash":"00ee4116eb6596f5c737599851dc592bff586c7a","modified":1515570779651},{"_id":"source/_posts/makefile_赋值运算符.md","hash":"e11ff9e84d5271b6b65c115db7b74106f4c98c73","modified":1518491908401},{"_id":"source/_posts/令牌桶算法算法.md","hash":"1a730f35e0be6ed70d9d44f0ad159043c31f1e73","modified":1518342798795},{"_id":"source/about/index.md","hash":"908522e48484fa1a16a0371a2105eb5c9b8b4ca1","modified":1515571073300},{"_id":"source/categories/index.md","hash":"d5b662da6a86a39f0dbb1b22be861250bac65571","modified":1515570957696},{"_id":"source/images/lingpaitong.PNG","hash":"9593f0fdd9837f2d672c3b51f2452a69c8202b92","modified":1515666865605},{"_id":"source/images/lingpaitong1.JPG","hash":"31b3f33681d4a7978603ba019e587c4dca333275","modified":1515998617768},{"_id":"source/images/lingpaitong2.JPG","hash":"1aac694f56bbd0b5011035469f19272438392cc2","modified":1515998575129},{"_id":"source/images/lptfp.PNG","hash":"155fa0575f4cea659800cf97160123245b209c69","modified":1515998874660},{"_id":"source/images/title.jpg","hash":"92eab9253bdc028b833712131a886d07ed731cd7","modified":1515567566801},{"_id":"source/tags/index.md","hash":"5e9bc76440b3a665673ef670585c0637154ca3c2","modified":1515570930600},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515567156423},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1515567156432},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515567090412},{"_id":"themes/next/.git/index","hash":"b14c48aae62c8fffda1b9f433d1c9dadde39549b","modified":1516583125597},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1515567156415},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1515567156452},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1515567156453},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1515567156454},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515567156454},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1515567156462},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1515567156462},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1515567156463},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1515567156463},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1515567156464},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1515567156465},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1515567156466},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1515567156467},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1515567156467},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1515567156468},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1515567156468},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1515567156469},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1515567156469},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1515567156469},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1515567156470},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1515567156471},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1515567156472},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1515567156509},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1515567156510},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1515567156518},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1515567156518},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1515567156519},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1515567156520},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1515567156520},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1515567156522},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1515567156523},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1515567156701},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1515567156702},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1515567156702},{"_id":"source/images/alipay.jpg","hash":"ad358de3bd52542295ad0e7bbbd0bdabfecaa79e","modified":1515570211773},{"_id":"source/images/lingpaitong3.jpg","hash":"6b7f17e980562aa6ce090d595e18c285a02005a1","modified":1518342005130},{"_id":"source/images/wechat.png","hash":"f0b00269fe9d73ad74c45635a897246a6e1b34ab","modified":1515568513450},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156593},{"_id":"source/images/xx.jpg","hash":"1b3e7c4df8a972b35d2eb29af58b646156da9ba4","modified":1515997107566},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515567090413},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515567090413},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515567090415},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515567090415},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515567090416},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515567090417},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515567090418},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1515567090417},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1515567090419},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515567090420},{"_id":"themes/next/.git/logs/HEAD","hash":"d7d6897472846d3744521c1c25fbbc434a35c733","modified":1515567156428},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515567156471},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515567156472},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1515567156473},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1515567156474},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1515567156474},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1515567156475},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1515567156475},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1515567156476},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1515567156476},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1515567156477},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1515567156478},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1515567156479},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1515567156480},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1515567156480},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1515567156481},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1515567156486},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1515567156486},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1515567156490},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1515567156503},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1515567156503},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1515567156504},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1515567156504},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1515567156505},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1515567156505},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1515567156506},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1515567156524},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1515567156524},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1515567156525},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1515567156525},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1515567156526},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1515567156527},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1515567156527},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1515567156528},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1515567156528},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1515567156592},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1515567156593},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515567156594},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515567156594},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1515567156595},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1515567156595},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1515567156596},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1515567156597},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1515567156597},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1515567156598},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1515567156598},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515567156599},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515567156599},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515567156600},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1515567156600},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515567156601},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1515567156601},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1515567156602},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515567156602},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156489},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156489},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156571},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156572},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156574},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156589},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515567156591},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1515567156426},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1515567156478},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1515567156479},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1515567156481},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1515567156482},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1515567156482},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1515567156483},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1515567156483},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1515567156484},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1515567156485},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1515567156487},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515567156488},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515567156490},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1515567156491},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1515567156492},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1515567156493},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1515567156493},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1515567156494},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1515567156494},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1515567156495},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1515567156495},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1515567156496},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1515567156496},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1515567156496},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1515567156497},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1515567156497},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1515567156498},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1515567156499},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1515567156499},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1515567156500},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1515567156500},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1515567156501},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1515567156501},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1515567156501},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1515567156502},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1515567156507},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1515567156508},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1515567156508},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1515567156509},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1515567156570},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1515567156571},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1515567156573},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1515567156574},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1515567156588},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1515567156589},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1515567156591},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1515567156591},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1515567156603},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1515567156604},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1515567156604},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1515567156605},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1515567156606},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1515567156606},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1515567156607},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1515567156607},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1515567156609},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1515567156609},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1515567156610},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515567156619},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515567156628},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1515567156629},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1515567156630},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1515567156630},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1515567156643},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1515567156644},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1515567156644},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1515567156645},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1515567156647},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1515567156647},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1515567156648},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1515567156648},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1515567156649},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1515567156669},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1515567156673},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1515567156673},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1515567156675},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1515567156674},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1515567156675},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1515567156675},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1515567156676},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1515567156677},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1515567156678},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515567156678},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515567156679},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515567156680},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515567156681},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515567156681},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515567156681},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515567156682},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515567156682},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515567156683},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515567156683},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515567156684},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515567156684},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515567156685},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1515567156685},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1515567156686},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1515567156687},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1515567156688},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1515567156695},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1515567156695},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1515567156699},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1515567156700},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1515567156700},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1515567156672},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d7d6897472846d3744521c1c25fbbc434a35c733","modified":1515567156427},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515567156418},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1515567156506},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1515567156507},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1515567156529},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1515567156530},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1515567156530},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1515567156531},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1515567156531},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1515567156541},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1515567156555},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1515567156566},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1515567156567},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1515567156567},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1515567156568},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1515567156569},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1515567156569},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1515567156570},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1515567156575},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1515567156576},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1515567156576},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1515567156577},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1515567156578},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1515567156578},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515567156578},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1515567156579},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1515567156581},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1515567156581},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1515567156582},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515567156582},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1515567156583},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1515567156584},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1515567156584},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1515567156585},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1515567156586},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1515567156586},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1515567156586},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1515567156608},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1515567156615},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1515567156617},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1515567156618},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515567156631},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515567156631},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515567156632},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515567156634},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515567156635},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515567156636},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1515567156640},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1515567156642},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1515567156642},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1515567156646},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515567156646},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1515567156650},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1515567156651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1515567156652},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1515567156693},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1515567156694},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1515567156616},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515567156667},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515567156668},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1515567156698},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d7d6897472846d3744521c1c25fbbc434a35c733","modified":1515567156422},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1515567156532},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1515567156533},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1515567156533},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1515567156533},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1515567156534},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1515567156535},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1515567156535},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1515567156536},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1515567156537},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1515567156538},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1515567156538},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1515567156539},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1515567156539},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1515567156540},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1515567156542},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1515567156542},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1515567156543},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1515567156543},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1515567156544},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1515567156544},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1515567156544},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1515567156545},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1515567156545},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1515567156546},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1515567156547},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1515567156547},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1515567156548},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1515567156548},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1515567156549},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1515567156549},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1515567156550},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1515567156551},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1515567156551},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1515567156551},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1515567156552},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1515567156553},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1515567156553},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1515567156554},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1515567156554},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1515567156555},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1515567156556},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1515567156556},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1515567156557},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1515567156558},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1515567156558},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1515567156559},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1515567156559},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1515567156559},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1515567156560},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1515567156560},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1515567156561},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1515567156562},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1515567156562},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1515567156563},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1515567156563},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1515567156564},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1515567156565},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1515567156565},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1515567156579},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515567156580},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515567156583},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515567156612},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515567156612},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515567156613},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515567156614},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1515567156614},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515567156636},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1515567156637},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1515567156638},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1515567156638},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1515567156639},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1515567156640},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515567156654},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515567156657},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515567156665},{"_id":"themes/next/.git/objects/pack/pack-9314a8b35b209b23287a0cea4319dcd677a3fa24.idx","hash":"1a081670fb9ee8eff02cf0651b2736fd839c6542","modified":1515567156201},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1515567156627},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1515567156692},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515567156662},{"_id":"themes/next/.git/objects/pack/pack-9314a8b35b209b23287a0cea4319dcd677a3fa24.pack","hash":"fe50a9325440d2b0f274cc695baa405ff3db5758","modified":1515567156260},{"_id":"source/_posts/vim自动格式化代码.md","hash":"0b31e6d6ad7476f3fa6c4da7e25b68ac723e816c","modified":1517888134322},{"_id":"public/baidusitemap.xml","hash":"fc3f219967d9ead82185c2486a5c793a44ea39cf","modified":1521515141248},{"_id":"public/search.xml","hash":"1fecc54796c9143ef4c3f17b828a1cc470886aa3","modified":1521515141264},{"_id":"public/sitemap.xml","hash":"61b121d9a1859a7be735578179ab5fbb45f1ef63","modified":1521515141264},{"_id":"public/404.html","hash":"30db83f0df90499bd653df8e656a15baeb9545b7","modified":1521096558527},{"_id":"public/about/index.html","hash":"db7fcdc830cf282f2419f92bb2429d3c4f4ce9bd","modified":1521096558527},{"_id":"public/categories/index.html","hash":"9344334c1dd16a817705d1294379ea5cd0603abf","modified":1521096558527},{"_id":"public/tags/index.html","hash":"2904199e41dbfec143333f1f0314503e5959c938","modified":1521096558527},{"_id":"public/2018/01/29/dpvs源码分析（二）之链路层/index.html","hash":"13add30090ff8f46187c85ea85037f565083eaab","modified":1521096558528},{"_id":"public/2018/01/29/dpvs源码分析（三）之网络层/index.html","hash":"44210732e7ef9b7e450d009503588fa636c6a644","modified":1521096558528},{"_id":"public/2018/01/19/makefile_赋值运算符/index.html","hash":"d1df6488d129e39a93867f861a45de294ece5a60","modified":1520497874738},{"_id":"public/2018/01/15/dpvs源码分析（一）之启动过程/index.html","hash":"f40edfb87801afa92ffda6c7bc767f86fb3c70cc","modified":1521096558528},{"_id":"public/2018/01/11/令牌桶算法算法/index.html","hash":"ec7ea5623a92b31cbdbf6694ffbb5f6d4d79b9fb","modified":1521096558529},{"_id":"public/2018/01/10/c语言构造函数/index.html","hash":"6be65a70c69f35088d8550ef6834d2a507184711","modified":1521096558529},{"_id":"public/2018/01/10/lsa/index.html","hash":"95d58262b80abf0df2ad1462e247e9554af1e479","modified":1521096558529},{"_id":"public/archives/index.html","hash":"fa733f9d4aacf6a741b757ff18f98701781ea9a9","modified":1521096558529},{"_id":"public/archives/2018/index.html","hash":"fe7fcdbb34c31d06833f73599b777f48ee3899b1","modified":1521096558529},{"_id":"public/archives/2018/01/index.html","hash":"11b21579aeb9263b3d04df50ab2455249f49e4e9","modified":1521096558529},{"_id":"public/categories/c语言/index.html","hash":"690ce067cd418d8fe426efa523a71b28decedb25","modified":1521096558529},{"_id":"public/categories/网络转发/index.html","hash":"4f50037fb42f13d8b3f1300cef614c56a1f61fce","modified":1521096558530},{"_id":"public/categories/备忘录/index.html","hash":"0850133759e360063ddb93cb9d67257b42711e1e","modified":1521096558530},{"_id":"public/index.html","hash":"21eaaf0541e36f96e9ff29149e0b619d6e27cf5c","modified":1521515141326},{"_id":"public/tags/c语言/index.html","hash":"62f8d7f2b92e8421f4700bc109a7c5e8ac8b3f51","modified":1521096558531},{"_id":"public/tags/网络转发/index.html","hash":"95a91c4281bbb9b9d905ac0d675e1d2cc7f02ed0","modified":1521096558530},{"_id":"public/tags/DPVS/index.html","hash":"f0a6d3144f50b65c89fbe6dbddf760dfe636004e","modified":1521096558531},{"_id":"public/tags/DPDK/index.html","hash":"1c4fa2b0261d07cf3ec9c72fd701557f359beb9d","modified":1521096558531},{"_id":"public/tags/makefile/index.html","hash":"72b005eaedf9364713882e798be2b27357d8a86d","modified":1518341594013},{"_id":"public/tags/令牌桶算法/index.html","hash":"e9bc389b8070e9e88529c8b1a4a62d6513b55cdf","modified":1521096558531},{"_id":"public/tags/多核限速/index.html","hash":"c8c32535d6b3231d682326cbbf58fa20bbf7a696","modified":1521096558531},{"_id":"public/tags/ospf/index.html","hash":"316eb3c9e2d6aefe11a40643694fe6bb455be898","modified":1521096558531},{"_id":"public/categories/ospf/index.html","hash":"599028a0172c3ffcb3b3e34b98e087282444dcde","modified":1521096558530},{"_id":"public/2018/02/06/vim自动格式化代码/index.html","hash":"1fdc87d159155db6b553169aefb5b95462aaaaf5","modified":1521096130700},{"_id":"public/archives/2018/02/index.html","hash":"25c9bc769b29f3ee244982ee65ecc9321d084a37","modified":1521096130703},{"_id":"public/tags/astyle/index.html","hash":"f91245ecbf7fbb126ca89fdac0057ba07bae8086","modified":1521096130704},{"_id":"public/tags/vim/index.html","hash":"abb35f6af08a76ae388eae787a4a9959999bf0ec","modified":1521096558531},{"_id":"public/tags/代码格式化/index.html","hash":"714bb7d8d0d5c92b08095482eb4fe7c6925d4e14","modified":1521096130704},{"_id":"public/images/lingpaitong3.jpg","hash":"6b7f17e980562aa6ce090d595e18c285a02005a1","modified":1518343251649},{"_id":"source/images/lingpaitong_rs.jpg","hash":"3d142f42e66373d9160c35f4a368a1ada16e1e0d","modified":1518342632990},{"_id":"public/images/lingpaitong_rs.jpg","hash":"3d142f42e66373d9160c35f4a368a1ada16e1e0d","modified":1518343251648},{"_id":"source/_posts/container_of.md","hash":"561bccddc36ad70e6077f5d53a5000b83e9f7638","modified":1520497794025},{"_id":"public/2018/03/08/container_of/index.html","hash":"2da91604c844cdd5dfbfe35961e8fa77bde91db1","modified":1521096558528},{"_id":"public/archives/2018/03/index.html","hash":"39743cb821de85094f6e0f7e78c74c1e7ab46705","modified":1521096558529},{"_id":"public/tags/container-of/index.html","hash":"045e79a190ba465375953a2bbbdd1c13c68bc1f0","modified":1521096558530},{"_id":"public/tags/linux/index.html","hash":"1f2f8369470f2cd07f5252635f37e1ba86fc854c","modified":1521096558530},{"_id":"public/tags/链表/index.html","hash":"e0b1fcc2edbefdf257d2e5c2bd41e3e828ef874b","modified":1521096558530},{"_id":"public/tags/makefil/index.html","hash":"f8478191830a33cd165aa5cccd2076cb6f5a8ab9","modified":1521096558531},{"_id":"source/_posts/vim备忘录.md","hash":"ac12a7994398bd583e99df8e4e03b50ba95f4bd4","modified":1521515118842},{"_id":"source/_posts/makefile备忘录.md","hash":"e11ff9e84d5271b6b65c115db7b74106f4c98c73","modified":1518491908401},{"_id":"public/2018/01/19/makefile备忘录/index.html","hash":"5000b6d5278edb206321a9b64659ae70cb5a787b","modified":1521096558528},{"_id":"public/2018/03/15/vim备忘录/index.html","hash":"a5e91546ec119b06a10885d03dd245e53628bc37","modified":1521515141326}],"Category":[{"name":"c语言","_id":"cjczxpjcw0005q0jhakflxz1f"},{"name":"网络转发","_id":"cjczxpjdg000bq0jhqndnohuc"},{"name":"ospf","_id":"cjczxpjds000nq0jh6dk5crg6"},{"name":"备忘录","_id":"cjczxpjdu000sq0jhvir08nq9"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-01-10T07:39:02.889Z","updated":"2018-01-10T07:18:02.056Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjczxpj270000q0jh3uuh2j4t","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"about","date":"2018-01-10T07:30:53.000Z","type":"about","_content":"# email\n```\nliangfu.deng@gmail.com\n```\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-01-10 15:30:53\ntype: about\n---\n# email\n```\nliangfu.deng@gmail.com\n```\n","updated":"2018-01-10T07:57:53.300Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjczxpjcp0002q0jhhoqy2ct9","content":"<h1 id=\"email\"><a href=\"#email\" class=\"headerlink\" title=\"email\"></a>email</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liangfu.deng@gmail.com</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"email\"><a href=\"#email\" class=\"headerlink\" title=\"email\"></a>email</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liangfu.deng@gmail.com</span><br></pre></td></tr></table></figure>\n"},{"title":"categories","date":"2014-12-22T04:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\n---\n","updated":"2018-01-10T07:55:57.696Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjczxpjct0004q0jhxwqla5dc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-01-10T07:07:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-01-10 15:07:56\ntype: \"tags\"\n---\n","updated":"2018-01-10T07:55:30.600Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjczxpjd10008q0jhbnqrw2vs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"container_of","_content":"linux 内核链表的实现有段代码比较有意思，这里记录一下。\n# 背景\n当在阅读遍历链表这个宏定义时，可能会对container_of有些许疑惑。\n{% codeblock lang:c %}\n/**    \n * list_for_each_entry  -   iterate over list of given type\n * @pos:    the type * to use as a loop cursor.\n * @head:   the head for your list.\n * @member: the name of the list_head within the struct.\n */    \n#define list_for_each_entry(pos, head, member)              \\\n    for (pos = list_first_entry(head, typeof(*pos), member);    \\\n         &pos->member != (head);                    \\\n         pos = list_next_entry(pos, member))\n\n\t\t \n/**\n * list_entry - get the struct for this entry\n * @ptr:    the &struct list_head pointer.\n * @type:   the type of the struct this is embedded in.\n * @member: the name of the list_head within the struct.\n */\n#define list_entry(ptr, type, member) \\\n    container_of(ptr, type, member)\n\n/**\n * list_first_entry - get the first element from a list\n * @ptr:    the list head to take the element from.\n * @type:   the type of the struct this is embedded in.\n * @member: the name of the list_head within the struct.\n *\n * Note, that list is expected to be not empty.\n */\n#define list_first_entry(ptr, type, member) \\\n    list_entry((ptr)->next, type, member)\n\n\n#ifndef container_of\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n#endif\n{% endcodeblock %}\n# 解析\n{% codeblock lang:c %}\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n#endif \n{% endcodeblock %}\n\n如上定义，为了更直观，定义如下数据结构：\n{% codeblock lang:c %}\nstruct list_head \n{\n\tstruct list_head *next;\n\tstruct list_head *prev; \n};\n\nstruct type\n{\n\tint a;\n\tint b;\n\tstruct list_head list;\n\tint c;\n};\n{% endcodeblock %}\n那么对于container_of宏定义，三个参数分别对应：\n* ptr: list的内存地址\n* type: list所在数据结构的类型\n* member： 是指list_head定义变量的名字，那么在这里就叫list\n\n这个宏定义的功能：通过member的地址和member的名字获取member所在数据结构的首地址。\n首先： (char *) &((type *)0)->member获取member在type类型中的偏移量\n然后： 用ptr减去member在type类型数据结构中的偏移量，那么就得到了member所在type变量的首地址。\n\n最后举例：\n{% codeblock lang:c %}\n#include<stdio.h>\n\nstruct A\n{\n   int a;\n   int b;\n   int c;\n};\n\nint main(void)\n{\n    struct A x;\n    struct A *y;\n    x.a = 1024;\n    printf(\"output1: %0x\\n\", &(((struct A*)0)->b)); \n    y = (struct A*) (((char*)(&x.b)) - ((char*)&(((struct A*)0)->b)));\n    printf(\"output2: %d\\n\", y->a); \n    printf(\"output3:%0x\\n\", &x);\n    printf(\"output4:%0x\\n\", y);\n    return 0;\n}\n\n运行结果为：\noutput1: 4\noutput2: 1024\noutput3:5b22a1e0\noutput4:5b22a1e0\n{% endcodeblock %}","source":"_posts/container_of.md","raw":"---\ntitle: container_of\ncategories: 备忘录\ntags:\n  - container_of\n  - linux\n  - 链表\n---\nlinux 内核链表的实现有段代码比较有意思，这里记录一下。\n# 背景\n当在阅读遍历链表这个宏定义时，可能会对container_of有些许疑惑。\n{% codeblock lang:c %}\n/**    \n * list_for_each_entry  -   iterate over list of given type\n * @pos:    the type * to use as a loop cursor.\n * @head:   the head for your list.\n * @member: the name of the list_head within the struct.\n */    \n#define list_for_each_entry(pos, head, member)              \\\n    for (pos = list_first_entry(head, typeof(*pos), member);    \\\n         &pos->member != (head);                    \\\n         pos = list_next_entry(pos, member))\n\n\t\t \n/**\n * list_entry - get the struct for this entry\n * @ptr:    the &struct list_head pointer.\n * @type:   the type of the struct this is embedded in.\n * @member: the name of the list_head within the struct.\n */\n#define list_entry(ptr, type, member) \\\n    container_of(ptr, type, member)\n\n/**\n * list_first_entry - get the first element from a list\n * @ptr:    the list head to take the element from.\n * @type:   the type of the struct this is embedded in.\n * @member: the name of the list_head within the struct.\n *\n * Note, that list is expected to be not empty.\n */\n#define list_first_entry(ptr, type, member) \\\n    list_entry((ptr)->next, type, member)\n\n\n#ifndef container_of\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n#endif\n{% endcodeblock %}\n# 解析\n{% codeblock lang:c %}\n#define container_of(ptr, type, member) \\\n    (type *)((char *)(ptr) - (char *) &((type *)0)->member)\n#endif \n{% endcodeblock %}\n\n如上定义，为了更直观，定义如下数据结构：\n{% codeblock lang:c %}\nstruct list_head \n{\n\tstruct list_head *next;\n\tstruct list_head *prev; \n};\n\nstruct type\n{\n\tint a;\n\tint b;\n\tstruct list_head list;\n\tint c;\n};\n{% endcodeblock %}\n那么对于container_of宏定义，三个参数分别对应：\n* ptr: list的内存地址\n* type: list所在数据结构的类型\n* member： 是指list_head定义变量的名字，那么在这里就叫list\n\n这个宏定义的功能：通过member的地址和member的名字获取member所在数据结构的首地址。\n首先： (char *) &((type *)0)->member获取member在type类型中的偏移量\n然后： 用ptr减去member在type类型数据结构中的偏移量，那么就得到了member所在type变量的首地址。\n\n最后举例：\n{% codeblock lang:c %}\n#include<stdio.h>\n\nstruct A\n{\n   int a;\n   int b;\n   int c;\n};\n\nint main(void)\n{\n    struct A x;\n    struct A *y;\n    x.a = 1024;\n    printf(\"output1: %0x\\n\", &(((struct A*)0)->b)); \n    y = (struct A*) (((char*)(&x.b)) - ((char*)&(((struct A*)0)->b)));\n    printf(\"output2: %d\\n\", y->a); \n    printf(\"output3:%0x\\n\", &x);\n    printf(\"output4:%0x\\n\", y);\n    return 0;\n}\n\n运行结果为：\noutput1: 4\noutput2: 1024\noutput3:5b22a1e0\noutput4:5b22a1e0\n{% endcodeblock %}","slug":"container_of","published":1,"date":"2018-03-08T08:29:53.933Z","updated":"2018-03-08T08:29:54.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96og6000064jhzm60i1so","content":"<p>linux 内核链表的实现有段代码比较有意思，这里记录一下。</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>当在阅读遍历链表这个宏定义时，可能会对container_of有些许疑惑。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**    </span></span><br><span class=\"line\"><span class=\"comment\"> * list_for_each_entry  -   iterate over list of given type</span></span><br><span class=\"line\"><span class=\"comment\"> * @pos:    the type * to use as a loop cursor.</span></span><br><span class=\"line\"><span class=\"comment\"> * @head:   the head for your list.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_for_each_entry(pos, head, member)              \\</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pos = list_first_entry(head, typeof(*pos), member);    \\</span><br><span class=\"line\">         &amp;pos-&gt;member != (head);                    \\</span><br><span class=\"line\">         pos = list_next_entry(pos, member))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * list_entry - get the struct for this entry</span></span><br><span class=\"line\"><span class=\"comment\"> * @ptr:    the &amp;struct list_head pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> * @type:   the type of the struct this is embedded in.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_entry(ptr, type, member) \\</span></span><br><span class=\"line\">    container_of(ptr, type, member)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * list_first_entry - get the first element from a list</span></span><br><span class=\"line\"><span class=\"comment\"> * @ptr:    the list head to take the element from.</span></span><br><span class=\"line\"><span class=\"comment\"> * @type:   the type of the struct this is embedded in.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note, that list is expected to be not empty.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_first_entry(ptr, type, member) \\</span></span><br><span class=\"line\">    list_entry((ptr)-&gt;next, type, member)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> container_of</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</span></span><br><span class=\"line\">    (type *)((<span class=\"keyword\">char</span> *)(ptr) - (<span class=\"keyword\">char</span> *) &amp;((type *)<span class=\"number\">0</span>)-&gt;member)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</span></span><br><span class=\"line\">    (type *)((<span class=\"keyword\">char</span> *)(ptr) - (<span class=\"keyword\">char</span> *) &amp;((type *)<span class=\"number\">0</span>)-&gt;member)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n<p>如上定义，为了更直观，定义如下数据结构：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> *<span class=\"title\">prev</span>;</span> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">type</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>那么对于container_of宏定义，三个参数分别对应：</p>\n<ul>\n<li>ptr: list的内存地址</li>\n<li>type: list所在数据结构的类型</li>\n<li>member： 是指list_head定义变量的名字，那么在这里就叫list</li>\n</ul>\n<p>这个宏定义的功能：通过member的地址和member的名字获取member所在数据结构的首地址。<br>首先： (char <em>) &amp;((type </em>)0)-&gt;member获取member在type类型中的偏移量<br>然后： 用ptr减去member在type类型数据结构中的偏移量，那么就得到了member所在type变量的首地址。</p>\n<p>最后举例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> <span class=\"title\">x</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> *<span class=\"title\">y</span>;</span></span><br><span class=\"line\">    x.a = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output1: %0x\\n\"</span>, &amp;(((struct A*)<span class=\"number\">0</span>)-&gt;b)); </span><br><span class=\"line\">    y = (struct A*) (((<span class=\"keyword\">char</span>*)(&amp;x.b)) - ((<span class=\"keyword\">char</span>*)&amp;(((struct A*)<span class=\"number\">0</span>)-&gt;b)));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output2: %d\\n\"</span>, y-&gt;a); </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output3:%0x\\n\"</span>, &amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output4:%0x\\n\"</span>, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果为：</span><br><span class=\"line\">output1: <span class=\"number\">4</span></span><br><span class=\"line\">output2: <span class=\"number\">1024</span></span><br><span class=\"line\">output3:<span class=\"number\">5b</span>22a1e0</span><br><span class=\"line\">output4:<span class=\"number\">5b</span>22a1e0</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>linux 内核链表的实现有段代码比较有意思，这里记录一下。</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>当在阅读遍历链表这个宏定义时，可能会对container_of有些许疑惑。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**    </span></span><br><span class=\"line\"><span class=\"comment\"> * list_for_each_entry  -   iterate over list of given type</span></span><br><span class=\"line\"><span class=\"comment\"> * @pos:    the type * to use as a loop cursor.</span></span><br><span class=\"line\"><span class=\"comment\"> * @head:   the head for your list.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_for_each_entry(pos, head, member)              \\</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pos = list_first_entry(head, typeof(*pos), member);    \\</span><br><span class=\"line\">         &amp;pos-&gt;member != (head);                    \\</span><br><span class=\"line\">         pos = list_next_entry(pos, member))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * list_entry - get the struct for this entry</span></span><br><span class=\"line\"><span class=\"comment\"> * @ptr:    the &amp;struct list_head pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> * @type:   the type of the struct this is embedded in.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_entry(ptr, type, member) \\</span></span><br><span class=\"line\">    container_of(ptr, type, member)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * list_first_entry - get the first element from a list</span></span><br><span class=\"line\"><span class=\"comment\"> * @ptr:    the list head to take the element from.</span></span><br><span class=\"line\"><span class=\"comment\"> * @type:   the type of the struct this is embedded in.</span></span><br><span class=\"line\"><span class=\"comment\"> * @member: the name of the list_head within the struct.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note, that list is expected to be not empty.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> list_first_entry(ptr, type, member) \\</span></span><br><span class=\"line\">    list_entry((ptr)-&gt;next, type, member)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> container_of</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</span></span><br><span class=\"line\">    (type *)((<span class=\"keyword\">char</span> *)(ptr) - (<span class=\"keyword\">char</span> *) &amp;((type *)<span class=\"number\">0</span>)-&gt;member)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> container_of(ptr, type, member) \\</span></span><br><span class=\"line\">    (type *)((<span class=\"keyword\">char</span> *)(ptr) - (<span class=\"keyword\">char</span> *) &amp;((type *)<span class=\"number\">0</span>)-&gt;member)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n<p>如上定义，为了更直观，定义如下数据结构：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> *<span class=\"title\">prev</span>;</span> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">type</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>那么对于container_of宏定义，三个参数分别对应：</p>\n<ul>\n<li>ptr: list的内存地址</li>\n<li>type: list所在数据结构的类型</li>\n<li>member： 是指list_head定义变量的名字，那么在这里就叫list</li>\n</ul>\n<p>这个宏定义的功能：通过member的地址和member的名字获取member所在数据结构的首地址。<br>首先： (char <em>) &amp;((type </em>)0)-&gt;member获取member在type类型中的偏移量<br>然后： 用ptr减去member在type类型数据结构中的偏移量，那么就得到了member所在type变量的首地址。</p>\n<p>最后举例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> <span class=\"title\">x</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> *<span class=\"title\">y</span>;</span></span><br><span class=\"line\">    x.a = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output1: %0x\\n\"</span>, &amp;(((struct A*)<span class=\"number\">0</span>)-&gt;b)); </span><br><span class=\"line\">    y = (struct A*) (((<span class=\"keyword\">char</span>*)(&amp;x.b)) - ((<span class=\"keyword\">char</span>*)&amp;(((struct A*)<span class=\"number\">0</span>)-&gt;b)));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output2: %d\\n\"</span>, y-&gt;a); </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output3:%0x\\n\"</span>, &amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"output4:%0x\\n\"</span>, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果为：</span><br><span class=\"line\">output1: <span class=\"number\">4</span></span><br><span class=\"line\">output2: <span class=\"number\">1024</span></span><br><span class=\"line\">output3:<span class=\"number\">5b</span>22a1e0</span><br><span class=\"line\">output4:<span class=\"number\">5b</span>22a1e0</span><br></pre></td></tr></table></figure></p>\n"},{"title":"dpvs源码分析（一）之启动过程","_content":"\n本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用...代替。\n# 从main函数开始\n在src/mian.c文件中，main函数还是比较清晰的。首先是初始 -> 然后启动端口 -> 然后启动工作线程 -> 主线程进入循环。\n{% codeblock lang:c %}\nint main(int argc, char *argv[])\n{\n    ...\n    //各种初始化，暂不关心，用到的时候再看。\n    err = rte_eal_init(argc, argv);\n    if (err < 0)\n        rte_exit(EXIT_FAILURE, \"Invalid EAL parameters\\n\");\n    argc -= err, argv += err;\n\n    rte_timer_subsystem_init();\n\n    if ((err = cfgfile_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail init configuration file: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = netif_virtual_devices_add()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail add virtual devices:%s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = dpvs_timer_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail init timer on %s\\n\", dpvs_strerror(err));\n\n    if ((err = tc_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init traffic control: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = netif_init(NULL)) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init netif: %s\\n\", dpvs_strerror(err));\n    /* Default lcore conf and port conf are used and may be changed here \n     * with \"netif_port_conf_update\" and \"netif_lcore_conf_set\" */\n\n    if ((err = ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init ctrl plane: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = tc_ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init tc control plane: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = vlan_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init vlan: %s\\n\", dpvs_strerror(err));\n\n    if ((err = inet_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init inet: %s\\n\", dpvs_strerror(err));\n\n    if ((err = sa_pool_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init sa_pool: %s\\n\", dpvs_strerror(err));\n\n    if ((err = dp_vs_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init ipvs: %s\\n\", dpvs_strerror(err));\n\n    if ((err = netif_ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init netif_ctrl: %s\\n\",\n                 dpvs_strerror(err));\n\n    /* config and start all available dpdk ports */\n    nports = rte_eth_dev_count();\n    for (pid = 0; pid < nports; pid++) {\n        dev = netif_port_get(pid);\n        if (!dev) {\n            RTE_LOG(WARNING, DPVS, \"port %d not found\\n\", pid);\n            continue;\n        }\n        //启动端口，配置端口。比如端口，队列，cpu的绑定等等。\n        err = netif_port_start(dev);\n        if (err != EDPVS_OK)\n            RTE_LOG(WARNING, DPVS, \"Start %s failed, skipping ...\\n\",\n                    dev->name);\n    }\n\n    /* print port-queue-lcore relation */\n    netif_print_lcore_conf(pql_conf_buf, &pql_conf_buf_len, true, 0);\n    RTE_LOG(INFO, DPVS, \"\\nport-queue-lcore relation array: \\n%s\\n\",\n            pql_conf_buf);\n\n    /* start data plane threads */\n    netif_lcore_start(); //这里就是干活的线程，通过跟踪这个函数，最后会调用到netif_loop，即工作线程的loop\n\n    /* write pid file */\n    if (!pidfile_write(DPVS_PIDFILE, getpid()))\n        goto end;\n\n    timer_sched_loop_interval = dpvs_timer_sched_interval_get();\n    assert(timer_sched_loop_interval > 0);\n\n    dpvs_state_set(DPVS_STATE_NORMAL);\n\n    /* start control plane thread */\n    // 主线程循环，用于处理ctrl plane等消息，这里占不讨论，后续文章再讨论。\n    while (1) {\n        /* reload configuations if reload flag is set */\n        try_reload();\n        /* IPC loop */\n        sockopt_ctl(NULL);\n        /* msg loop */\n        msg_master_process();\n\n        /* timer */\n        loop_cnt++;\n        if (loop_cnt % timer_sched_loop_interval == 0)\n            rte_timer_manage();\n        /* kni */\n        kni_process_on_master();\n\n        /* process mac ring on master */\n        neigh_process_ring(NULL);\n \n        /* increase loop counts */\n        netif_update_master_loop_cnt();\n    }\n\n\t...\n\n    exit(0);\n}\n{% endcodeblock %}\n\n# DPVS dataplane线程，即工作线程 \nDPVS在netif.c文件中static int netif_loop(void * dummy) 函数中收取，处理和发送数据包。\n{% codeblock lang:c %}\nstatic int netif_loop(void *dummy)\n{\n\t...\n\n    try_isol_rxq_lcore_loop();\n    if (0 == lcore_conf[lcore2index[cid]].nports) {\n        RTE_LOG(INFO, NETIF, \"[%s] Lcore %d has nothing to do.\\n\", __func__, cid);\n        return EDPVS_IDLE;\n    }\n    /* 这里收包和处理CPU分离，是指收包的CPU和处理包的CPU不同，应该是为了增加网卡的吞吐能力吧。\n    只有在/etc/dpvs.conf配置文件中配置了isol_rx_cpu_ids才会生效，暂时用不到，在后文中再来分析吧*/\n\n    list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_INIT], list) {\n        do_lcore_job(job);\n    }\n    /* NETIF_LCORE_JOB_INIT type类型暂时没有用到，忽略之*/\n\n    while (1) {\n#ifdef CONFIG_RECORD_BIG_LOOP\n        loop_start = rte_get_timer_cycles();\n#endif\n/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */\n\n        lcore_stats[cid].lcore_loop++;\n        list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_LOOP], list) {\n            do_lcore_job(job);\n        }\n        ++netif_loop_tick[cid];\n        list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_SLOW], list) {\n            if (netif_loop_tick[cid] % job->skip_loops == 0) {\n                do_lcore_job(job);\n                //netif_loop_tick[cid] = 0;\n            }\n        }\n        /* 上面代码有点类似于netfilter处理链，数据包会被处理链的job依次处理, 这些job链放在netif_lcore_jobs 这个全局变量中。\n        那么，有哪些job呢，在什么地方初始化这个全局变量的呢？他们的处理顺序是怎么样的？在下一节会有说明*/\n#ifdef CONFIG_RECORD_BIG_LOOP\n        loop_end = rte_get_timer_cycles();\n        loop_time = (loop_end - loop_start) * 1E6 / cycles_per_sec;\n        if (loop_time > longest_lcore_loop[cid]) {\n            RTE_LOG(WARNING, NETIF, \"update longest_lcore_loop[%d] = %d (<- %d)\\n\",\n                    cid, loop_time, longest_lcore_loop[cid]);\n            longest_lcore_loop[cid] = loop_time;\n        }\n        if (loop_time > BIG_LOOP_THRESH) {\n            print_job_time(buf, sizeof(buf));\n            RTE_LOG(WARNING, NETIF, \"lcore[%d] loop over %d usecs (actual=%d, max=%d):\\n%s\\n\",\n                    cid, BIG_LOOP_THRESH, loop_time, longest_lcore_loop[cid], buf);\n        }\n#endif\n/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */\n    }\n    return EDPVS_OK;\n}\n\n//那么do_lcore_job 做了什么呢？ 其实do_lcore_job就是调用了job结构体中注册的函数指针指向的函数。\n\nstatic inline void do_lcore_job(struct netif_lcore_loop_job *job)\n{\n#ifdef CONFIG_RECORD_BIG_LOOP\n    uint64_t job_start, job_end;\n    job_start = rte_get_timer_cycles();\n#endif\n\n    job->func(job->data);\n    // 这里就是真正干活的地方了。\n    // func 函数指针在main函数中进行了初始化，初始化过程及代码位置在下一节会讲到。\n\n#ifdef CONFIG_RECORD_BIG_LOOP\n    job_end = rte_get_timer_cycles();\n    job->job_time[rte_lcore_id()] = (job_end - job_start) * 1E6 / cycles_per_sec;\n#endif\n}\n{% endcodeblock %}\n\n\n# DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）\n目前job的类型为，又有NETIF_LCORE_JOB_LOOP和NETIF_LCORE_JOB_SLOW有用到：\n```\nenum netif_lcore_job_type {\n    NETIF_LCORE_JOB_INIT      = 0,\n    NETIF_LCORE_JOB_LOOP      = 1,\n    NETIF_LCORE_JOB_SLOW      = 2,\n    NETIF_LCORE_JOB_TYPE_MAX  = 3,\n};\n```\n\n## job注册函数\nnetif_lcore_loop_job_register 函数将job这测到netif_lcore_jobs这个全局变量中。\n{% codeblock lang:c %}\nint netif_lcore_loop_job_register(struct netif_lcore_loop_job *lcore_job)\n{\n    struct netif_lcore_loop_job *cur;\n    if (unlikely(NULL == lcore_job))\n        return EDPVS_INVAL;\n\n    list_for_each_entry(cur, &netif_lcore_jobs[lcore_job->type], list) {\n        if (cur == lcore_job) {\n            return EDPVS_EXIST;\n        }\n    }\n\n    if (unlikely(NETIF_LCORE_JOB_SLOW == lcore_job->type && lcore_job->skip_loops <= 0))\n        return EDPVS_INVAL;\n\n    list_add_tail(&lcore_job->list, &netif_lcore_jobs[lcore_job->type]);\n    //netif_lcore_jobs 记录job的全局变量，这个在netif_loop用到了\n    return EDPVS_OK;\n}\n{% endcodeblock %}\n\n那么在哪些位置调用了netif_lcore_loop_job_register 注册job，通过阅读源代码，可以发现注册NETIF_LCORE_JOB_LOOP， NETIF_LCORE_JOB_SLOW 这两种类型的job分布在如下所示位置。\n## NETIF_LCORE_JOB_LOOP job注册\n** 第一处： main->netif_init->netif_lcore_init函数中：** \n{% codeblock lang:c %}\n/* register lcore jobs*/\nsnprintf(netif_jobs[0].name, sizeof(netif_jobs[0].name) - 1, \"%s\", \"recv_fwd\");\nnetif_jobs[0].func = lcore_job_recv_fwd;\nnetif_jobs[0].data = NULL;\nnetif_jobs[0].type = NETIF_LCORE_JOB_LOOP;\nsnprintf(netif_jobs[1].name, sizeof(netif_jobs[1].name) - 1, \"%s\", \"xmit\");\nnetif_jobs[1].func = lcore_job_xmit;\nnetif_jobs[1].data = NULL;\nnetif_jobs[1].type = NETIF_LCORE_JOB_LOOP;\nsnprintf(netif_jobs[2].name, sizeof(netif_jobs[2].name) - 1, \"%s\", \"timer_manage\");\nnetif_jobs[2].func = lcore_job_timer_manage;\nnetif_jobs[2].data = NULL;\nnetif_jobs[2].type = NETIF_LCORE_JOB_LOOP;\n{% endcodeblock %}\n\n** 第二处： main->ctrl_init->msg_init**\n{% codeblock lang:c %}\nctrl_lcore_job.func = slave_lcore_loop_func;\nctrl_lcore_job.data = NULL;\nctrl_lcore_job.type = NETIF_LCORE_JOB_LOOP;\nif ((ret = netif_lcore_loop_job_register(&ctrl_lcore_job)) < 0) {\n    RTE_LOG(ERR, MSGMGR, \"%s: fail to register ctrl func on slave lcores\\n\", __func__);\n    return ret;\n}\n{% endcodeblock %}\n\n## NETIF_LCORE_JOB_SLOW job注册\n** 第一处： main->inet_init -> ipv4_init-> ipv4_frag_init **\n{% codeblock lang:c %}\nfrag_job.func = ipv4_frag_job;\nfrag_job.data = NULL;\nfrag_job.type = NETIF_LCORE_JOB_SLOW;\nfrag_job.skip_loops = IP4_FRAG_FREE_DEATH_ROW_INTERVAL;\nerr = netif_lcore_loop_job_register(&frag_job);\n{% endcodeblock %}\n\n\n** 第二处： mian->inet_init -> neigh_init -> arp_init **\n{% codeblock lang:c %}\nneigh_sync_job.func = neigh_process_ring;\nneigh_sync_job.data = NULL;\nneigh_sync_job.type = NETIF_LCORE_JOB_SLOW;\nneigh_sync_job.skip_loops = NEIGH_PROCESS_MAC_RING_INTERVAL;\nerr = netif_lcore_loop_job_register(&neigh_sync_job);\n{% endcodeblock %}\n\n\n** 通过上述分析，那么我们可以知道job的处理流程为 **\n以下流程虽然都要执行，但是函数前后并不是强制依赖，比如lcore_job_timer_manage 不依赖于lcore_job_xmit的执行结果\n```\nlcore_job_recv_fwd -> lcore_job_xmit -> lcore_job_timer_manage -> slave_lcore_loop_func ->\nipv4_frag_job -> neigh_process_ring\n\n```\n这些函数的具体功能，将在下一章节进行分析。\n\n启动过程就到此结束了，若有疑问，欢迎发邮件和我联系。\n\n\n\n","source":"_posts/dpvs源码分析（一）之启动过程.md","raw":"---\ntitle: dpvs源码分析（一）之启动过程\ncategories: 网络转发\ntags:\n  - 网络转发\n  - DPVS\n  - DPDK\n---\n\n本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用...代替。\n# 从main函数开始\n在src/mian.c文件中，main函数还是比较清晰的。首先是初始 -> 然后启动端口 -> 然后启动工作线程 -> 主线程进入循环。\n{% codeblock lang:c %}\nint main(int argc, char *argv[])\n{\n    ...\n    //各种初始化，暂不关心，用到的时候再看。\n    err = rte_eal_init(argc, argv);\n    if (err < 0)\n        rte_exit(EXIT_FAILURE, \"Invalid EAL parameters\\n\");\n    argc -= err, argv += err;\n\n    rte_timer_subsystem_init();\n\n    if ((err = cfgfile_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail init configuration file: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = netif_virtual_devices_add()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail add virtual devices:%s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = dpvs_timer_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail init timer on %s\\n\", dpvs_strerror(err));\n\n    if ((err = tc_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init traffic control: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = netif_init(NULL)) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init netif: %s\\n\", dpvs_strerror(err));\n    /* Default lcore conf and port conf are used and may be changed here \n     * with \"netif_port_conf_update\" and \"netif_lcore_conf_set\" */\n\n    if ((err = ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init ctrl plane: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = tc_ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init tc control plane: %s\\n\",\n                 dpvs_strerror(err));\n\n    if ((err = vlan_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init vlan: %s\\n\", dpvs_strerror(err));\n\n    if ((err = inet_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init inet: %s\\n\", dpvs_strerror(err));\n\n    if ((err = sa_pool_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init sa_pool: %s\\n\", dpvs_strerror(err));\n\n    if ((err = dp_vs_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init ipvs: %s\\n\", dpvs_strerror(err));\n\n    if ((err = netif_ctrl_init()) != EDPVS_OK)\n        rte_exit(EXIT_FAILURE, \"Fail to init netif_ctrl: %s\\n\",\n                 dpvs_strerror(err));\n\n    /* config and start all available dpdk ports */\n    nports = rte_eth_dev_count();\n    for (pid = 0; pid < nports; pid++) {\n        dev = netif_port_get(pid);\n        if (!dev) {\n            RTE_LOG(WARNING, DPVS, \"port %d not found\\n\", pid);\n            continue;\n        }\n        //启动端口，配置端口。比如端口，队列，cpu的绑定等等。\n        err = netif_port_start(dev);\n        if (err != EDPVS_OK)\n            RTE_LOG(WARNING, DPVS, \"Start %s failed, skipping ...\\n\",\n                    dev->name);\n    }\n\n    /* print port-queue-lcore relation */\n    netif_print_lcore_conf(pql_conf_buf, &pql_conf_buf_len, true, 0);\n    RTE_LOG(INFO, DPVS, \"\\nport-queue-lcore relation array: \\n%s\\n\",\n            pql_conf_buf);\n\n    /* start data plane threads */\n    netif_lcore_start(); //这里就是干活的线程，通过跟踪这个函数，最后会调用到netif_loop，即工作线程的loop\n\n    /* write pid file */\n    if (!pidfile_write(DPVS_PIDFILE, getpid()))\n        goto end;\n\n    timer_sched_loop_interval = dpvs_timer_sched_interval_get();\n    assert(timer_sched_loop_interval > 0);\n\n    dpvs_state_set(DPVS_STATE_NORMAL);\n\n    /* start control plane thread */\n    // 主线程循环，用于处理ctrl plane等消息，这里占不讨论，后续文章再讨论。\n    while (1) {\n        /* reload configuations if reload flag is set */\n        try_reload();\n        /* IPC loop */\n        sockopt_ctl(NULL);\n        /* msg loop */\n        msg_master_process();\n\n        /* timer */\n        loop_cnt++;\n        if (loop_cnt % timer_sched_loop_interval == 0)\n            rte_timer_manage();\n        /* kni */\n        kni_process_on_master();\n\n        /* process mac ring on master */\n        neigh_process_ring(NULL);\n \n        /* increase loop counts */\n        netif_update_master_loop_cnt();\n    }\n\n\t...\n\n    exit(0);\n}\n{% endcodeblock %}\n\n# DPVS dataplane线程，即工作线程 \nDPVS在netif.c文件中static int netif_loop(void * dummy) 函数中收取，处理和发送数据包。\n{% codeblock lang:c %}\nstatic int netif_loop(void *dummy)\n{\n\t...\n\n    try_isol_rxq_lcore_loop();\n    if (0 == lcore_conf[lcore2index[cid]].nports) {\n        RTE_LOG(INFO, NETIF, \"[%s] Lcore %d has nothing to do.\\n\", __func__, cid);\n        return EDPVS_IDLE;\n    }\n    /* 这里收包和处理CPU分离，是指收包的CPU和处理包的CPU不同，应该是为了增加网卡的吞吐能力吧。\n    只有在/etc/dpvs.conf配置文件中配置了isol_rx_cpu_ids才会生效，暂时用不到，在后文中再来分析吧*/\n\n    list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_INIT], list) {\n        do_lcore_job(job);\n    }\n    /* NETIF_LCORE_JOB_INIT type类型暂时没有用到，忽略之*/\n\n    while (1) {\n#ifdef CONFIG_RECORD_BIG_LOOP\n        loop_start = rte_get_timer_cycles();\n#endif\n/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */\n\n        lcore_stats[cid].lcore_loop++;\n        list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_LOOP], list) {\n            do_lcore_job(job);\n        }\n        ++netif_loop_tick[cid];\n        list_for_each_entry(job, &netif_lcore_jobs[NETIF_LCORE_JOB_SLOW], list) {\n            if (netif_loop_tick[cid] % job->skip_loops == 0) {\n                do_lcore_job(job);\n                //netif_loop_tick[cid] = 0;\n            }\n        }\n        /* 上面代码有点类似于netfilter处理链，数据包会被处理链的job依次处理, 这些job链放在netif_lcore_jobs 这个全局变量中。\n        那么，有哪些job呢，在什么地方初始化这个全局变量的呢？他们的处理顺序是怎么样的？在下一节会有说明*/\n#ifdef CONFIG_RECORD_BIG_LOOP\n        loop_end = rte_get_timer_cycles();\n        loop_time = (loop_end - loop_start) * 1E6 / cycles_per_sec;\n        if (loop_time > longest_lcore_loop[cid]) {\n            RTE_LOG(WARNING, NETIF, \"update longest_lcore_loop[%d] = %d (<- %d)\\n\",\n                    cid, loop_time, longest_lcore_loop[cid]);\n            longest_lcore_loop[cid] = loop_time;\n        }\n        if (loop_time > BIG_LOOP_THRESH) {\n            print_job_time(buf, sizeof(buf));\n            RTE_LOG(WARNING, NETIF, \"lcore[%d] loop over %d usecs (actual=%d, max=%d):\\n%s\\n\",\n                    cid, BIG_LOOP_THRESH, loop_time, longest_lcore_loop[cid], buf);\n        }\n#endif\n/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */\n    }\n    return EDPVS_OK;\n}\n\n//那么do_lcore_job 做了什么呢？ 其实do_lcore_job就是调用了job结构体中注册的函数指针指向的函数。\n\nstatic inline void do_lcore_job(struct netif_lcore_loop_job *job)\n{\n#ifdef CONFIG_RECORD_BIG_LOOP\n    uint64_t job_start, job_end;\n    job_start = rte_get_timer_cycles();\n#endif\n\n    job->func(job->data);\n    // 这里就是真正干活的地方了。\n    // func 函数指针在main函数中进行了初始化，初始化过程及代码位置在下一节会讲到。\n\n#ifdef CONFIG_RECORD_BIG_LOOP\n    job_end = rte_get_timer_cycles();\n    job->job_time[rte_lcore_id()] = (job_end - job_start) * 1E6 / cycles_per_sec;\n#endif\n}\n{% endcodeblock %}\n\n\n# DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）\n目前job的类型为，又有NETIF_LCORE_JOB_LOOP和NETIF_LCORE_JOB_SLOW有用到：\n```\nenum netif_lcore_job_type {\n    NETIF_LCORE_JOB_INIT      = 0,\n    NETIF_LCORE_JOB_LOOP      = 1,\n    NETIF_LCORE_JOB_SLOW      = 2,\n    NETIF_LCORE_JOB_TYPE_MAX  = 3,\n};\n```\n\n## job注册函数\nnetif_lcore_loop_job_register 函数将job这测到netif_lcore_jobs这个全局变量中。\n{% codeblock lang:c %}\nint netif_lcore_loop_job_register(struct netif_lcore_loop_job *lcore_job)\n{\n    struct netif_lcore_loop_job *cur;\n    if (unlikely(NULL == lcore_job))\n        return EDPVS_INVAL;\n\n    list_for_each_entry(cur, &netif_lcore_jobs[lcore_job->type], list) {\n        if (cur == lcore_job) {\n            return EDPVS_EXIST;\n        }\n    }\n\n    if (unlikely(NETIF_LCORE_JOB_SLOW == lcore_job->type && lcore_job->skip_loops <= 0))\n        return EDPVS_INVAL;\n\n    list_add_tail(&lcore_job->list, &netif_lcore_jobs[lcore_job->type]);\n    //netif_lcore_jobs 记录job的全局变量，这个在netif_loop用到了\n    return EDPVS_OK;\n}\n{% endcodeblock %}\n\n那么在哪些位置调用了netif_lcore_loop_job_register 注册job，通过阅读源代码，可以发现注册NETIF_LCORE_JOB_LOOP， NETIF_LCORE_JOB_SLOW 这两种类型的job分布在如下所示位置。\n## NETIF_LCORE_JOB_LOOP job注册\n** 第一处： main->netif_init->netif_lcore_init函数中：** \n{% codeblock lang:c %}\n/* register lcore jobs*/\nsnprintf(netif_jobs[0].name, sizeof(netif_jobs[0].name) - 1, \"%s\", \"recv_fwd\");\nnetif_jobs[0].func = lcore_job_recv_fwd;\nnetif_jobs[0].data = NULL;\nnetif_jobs[0].type = NETIF_LCORE_JOB_LOOP;\nsnprintf(netif_jobs[1].name, sizeof(netif_jobs[1].name) - 1, \"%s\", \"xmit\");\nnetif_jobs[1].func = lcore_job_xmit;\nnetif_jobs[1].data = NULL;\nnetif_jobs[1].type = NETIF_LCORE_JOB_LOOP;\nsnprintf(netif_jobs[2].name, sizeof(netif_jobs[2].name) - 1, \"%s\", \"timer_manage\");\nnetif_jobs[2].func = lcore_job_timer_manage;\nnetif_jobs[2].data = NULL;\nnetif_jobs[2].type = NETIF_LCORE_JOB_LOOP;\n{% endcodeblock %}\n\n** 第二处： main->ctrl_init->msg_init**\n{% codeblock lang:c %}\nctrl_lcore_job.func = slave_lcore_loop_func;\nctrl_lcore_job.data = NULL;\nctrl_lcore_job.type = NETIF_LCORE_JOB_LOOP;\nif ((ret = netif_lcore_loop_job_register(&ctrl_lcore_job)) < 0) {\n    RTE_LOG(ERR, MSGMGR, \"%s: fail to register ctrl func on slave lcores\\n\", __func__);\n    return ret;\n}\n{% endcodeblock %}\n\n## NETIF_LCORE_JOB_SLOW job注册\n** 第一处： main->inet_init -> ipv4_init-> ipv4_frag_init **\n{% codeblock lang:c %}\nfrag_job.func = ipv4_frag_job;\nfrag_job.data = NULL;\nfrag_job.type = NETIF_LCORE_JOB_SLOW;\nfrag_job.skip_loops = IP4_FRAG_FREE_DEATH_ROW_INTERVAL;\nerr = netif_lcore_loop_job_register(&frag_job);\n{% endcodeblock %}\n\n\n** 第二处： mian->inet_init -> neigh_init -> arp_init **\n{% codeblock lang:c %}\nneigh_sync_job.func = neigh_process_ring;\nneigh_sync_job.data = NULL;\nneigh_sync_job.type = NETIF_LCORE_JOB_SLOW;\nneigh_sync_job.skip_loops = NEIGH_PROCESS_MAC_RING_INTERVAL;\nerr = netif_lcore_loop_job_register(&neigh_sync_job);\n{% endcodeblock %}\n\n\n** 通过上述分析，那么我们可以知道job的处理流程为 **\n以下流程虽然都要执行，但是函数前后并不是强制依赖，比如lcore_job_timer_manage 不依赖于lcore_job_xmit的执行结果\n```\nlcore_job_recv_fwd -> lcore_job_xmit -> lcore_job_timer_manage -> slave_lcore_loop_func ->\nipv4_frag_job -> neigh_process_ring\n\n```\n这些函数的具体功能，将在下一章节进行分析。\n\n启动过程就到此结束了，若有疑问，欢迎发邮件和我联系。\n\n\n\n","slug":"dpvs源码分析（一）之启动过程","published":1,"date":"2018-01-15T09:49:37.138Z","updated":"2018-02-13T03:19:28.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96ogh000164jhi1i8midf","content":"<p>本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用…代替。</p>\n<h1 id=\"从main函数开始\"><a href=\"#从main函数开始\" class=\"headerlink\" title=\"从main函数开始\"></a>从main函数开始</h1><p>在src/mian.c文件中，main函数还是比较清晰的。首先是初始 -&gt; 然后启动端口 -&gt; 然后启动工作线程 -&gt; 主线程进入循环。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//各种初始化，暂不关心，用到的时候再看。</span></span><br><span class=\"line\">    err = rte_eal_init(argc, argv);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid EAL parameters\\n\"</span>);</span><br><span class=\"line\">    argc -= err, argv += err;</span><br><span class=\"line\"></span><br><span class=\"line\">    rte_timer_subsystem_init();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = cfgfile_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail init configuration file: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_virtual_devices_add()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail add virtual devices:%s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = dpvs_timer_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail init timer on %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = tc_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init traffic control: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_init(<span class=\"literal\">NULL</span>)) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init netif: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\">    <span class=\"comment\">/* Default lcore conf and port conf are used and may be changed here </span></span><br><span class=\"line\"><span class=\"comment\">     * with \"netif_port_conf_update\" and \"netif_lcore_conf_set\" */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init ctrl plane: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = tc_ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init tc control plane: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = vlan_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init vlan: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = inet_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init inet: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = sa_pool_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init sa_pool: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = dp_vs_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init ipvs: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init netif_ctrl: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* config and start all available dpdk ports */</span></span><br><span class=\"line\">    nports = rte_eth_dev_count();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pid = <span class=\"number\">0</span>; pid &lt; nports; pid++) &#123;</span><br><span class=\"line\">        dev = netif_port_get(pid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dev) &#123;</span><br><span class=\"line\">            RTE_LOG(WARNING, DPVS, <span class=\"string\">\"port %d not found\\n\"</span>, pid);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//启动端口，配置端口。比如端口，队列，cpu的绑定等等。</span></span><br><span class=\"line\">        err = netif_port_start(dev);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err != EDPVS_OK)</span><br><span class=\"line\">            RTE_LOG(WARNING, DPVS, <span class=\"string\">\"Start %s failed, skipping ...\\n\"</span>,</span><br><span class=\"line\">                    dev-&gt;name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* print port-queue-lcore relation */</span></span><br><span class=\"line\">    netif_print_lcore_conf(pql_conf_buf, &amp;pql_conf_buf_len, <span class=\"literal\">true</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    RTE_LOG(INFO, DPVS, <span class=\"string\">\"\\nport-queue-lcore relation array: \\n%s\\n\"</span>,</span><br><span class=\"line\">            pql_conf_buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* start data plane threads */</span></span><br><span class=\"line\">    netif_lcore_start(); <span class=\"comment\">//这里就是干活的线程，通过跟踪这个函数，最后会调用到netif_loop，即工作线程的loop</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* write pid file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pidfile_write(DPVS_PIDFILE, getpid()))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> end;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer_sched_loop_interval = dpvs_timer_sched_interval_get();</span><br><span class=\"line\">    assert(timer_sched_loop_interval &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    dpvs_state_set(DPVS_STATE_NORMAL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* start control plane thread */</span></span><br><span class=\"line\">    <span class=\"comment\">// 主线程循环，用于处理ctrl plane等消息，这里占不讨论，后续文章再讨论。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* reload configuations if reload flag is set */</span></span><br><span class=\"line\">        try_reload();</span><br><span class=\"line\">        <span class=\"comment\">/* IPC loop */</span></span><br><span class=\"line\">        sockopt_ctl(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* msg loop */</span></span><br><span class=\"line\">        msg_master_process();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* timer */</span></span><br><span class=\"line\">        loop_cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_cnt % timer_sched_loop_interval == <span class=\"number\">0</span>)</span><br><span class=\"line\">            rte_timer_manage();</span><br><span class=\"line\">        <span class=\"comment\">/* kni */</span></span><br><span class=\"line\">        kni_process_on_master();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* process mac ring on master */</span></span><br><span class=\"line\">        neigh_process_ring(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* increase loop counts */</span></span><br><span class=\"line\">        netif_update_master_loop_cnt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"DPVS-dataplane线程，即工作线程\"><a href=\"#DPVS-dataplane线程，即工作线程\" class=\"headerlink\" title=\"DPVS dataplane线程，即工作线程\"></a>DPVS dataplane线程，即工作线程</h1><p>DPVS在netif.c文件中static int netif_loop(void * dummy) 函数中收取，处理和发送数据包。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">netif_loop</span><span class=\"params\">(<span class=\"keyword\">void</span> *dummy)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    try_isol_rxq_lcore_loop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == lcore_conf[lcore2index[cid]].nports) &#123;</span><br><span class=\"line\">        RTE_LOG(INFO, NETIF, <span class=\"string\">\"[%s] Lcore %d has nothing to do.\\n\"</span>, __func__, cid);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_IDLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里收包和处理CPU分离，是指收包的CPU和处理包的CPU不同，应该是为了增加网卡的吞吐能力吧。</span></span><br><span class=\"line\"><span class=\"comment\">    只有在/etc/dpvs.conf配置文件中配置了isol_rx_cpu_ids才会生效，暂时用不到，在后文中再来分析吧*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_INIT], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">        do_lcore_job(job);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* NETIF_LCORE_JOB_INIT type类型暂时没有用到，忽略之*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">        loop_start = rte_get_timer_cycles();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lcore_stats[cid].lcore_loop++;</span><br><span class=\"line\">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_LOOP], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">            do_lcore_job(job);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++netif_loop_tick[cid];</span><br><span class=\"line\">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_SLOW], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (netif_loop_tick[cid] % job-&gt;skip_loops == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                do_lcore_job(job);</span><br><span class=\"line\">                <span class=\"comment\">//netif_loop_tick[cid] = 0;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* 上面代码有点类似于netfilter处理链，数据包会被处理链的job依次处理, 这些job链放在netif_lcore_jobs 这个全局变量中。</span></span><br><span class=\"line\"><span class=\"comment\">        那么，有哪些job呢，在什么地方初始化这个全局变量的呢？他们的处理顺序是怎么样的？在下一节会有说明*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">        loop_end = rte_get_timer_cycles();</span><br><span class=\"line\">        loop_time = (loop_end - loop_start) * <span class=\"number\">1E6</span> / cycles_per_sec;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_time &gt; longest_lcore_loop[cid]) &#123;</span><br><span class=\"line\">            RTE_LOG(WARNING, NETIF, <span class=\"string\">\"update longest_lcore_loop[%d] = %d (&lt;- %d)\\n\"</span>,</span><br><span class=\"line\">                    cid, loop_time, longest_lcore_loop[cid]);</span><br><span class=\"line\">            longest_lcore_loop[cid] = loop_time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_time &gt; BIG_LOOP_THRESH) &#123;</span><br><span class=\"line\">            print_job_time(buf, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">            RTE_LOG(WARNING, NETIF, <span class=\"string\">\"lcore[%d] loop over %d usecs (actual=%d, max=%d):\\n%s\\n\"</span>,</span><br><span class=\"line\">                    cid, BIG_LOOP_THRESH, loop_time, longest_lcore_loop[cid], buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//那么do_lcore_job 做了什么呢？ 其实do_lcore_job就是调用了job结构体中注册的函数指针指向的函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">do_lcore_job</span><span class=\"params\">(struct netif_lcore_loop_job *job)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> job_start, job_end;</span><br><span class=\"line\">    job_start = rte_get_timer_cycles();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    job-&gt;func(job-&gt;data);</span><br><span class=\"line\">    <span class=\"comment\">// 这里就是真正干活的地方了。</span></span><br><span class=\"line\">    <span class=\"comment\">// func 函数指针在main函数中进行了初始化，初始化过程及代码位置在下一节会讲到。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">    job_end = rte_get_timer_cycles();</span><br><span class=\"line\">    job-&gt;job_time[rte_lcore_id()] = (job_end - job_start) * <span class=\"number\">1E6</span> / cycles_per_sec;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）\"><a href=\"#DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）\" class=\"headerlink\" title=\"DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）\"></a>DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）</h1><p>目前job的类型为，又有NETIF_LCORE_JOB_LOOP和NETIF_LCORE_JOB_SLOW有用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum netif_lcore_job_type &#123;</span><br><span class=\"line\">    NETIF_LCORE_JOB_INIT      = 0,</span><br><span class=\"line\">    NETIF_LCORE_JOB_LOOP      = 1,</span><br><span class=\"line\">    NETIF_LCORE_JOB_SLOW      = 2,</span><br><span class=\"line\">    NETIF_LCORE_JOB_TYPE_MAX  = 3,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"job注册函数\"><a href=\"#job注册函数\" class=\"headerlink\" title=\"job注册函数\"></a>job注册函数</h2><p>netif_lcore_loop_job_register 函数将job这测到netif_lcore_jobs这个全局变量中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">netif_lcore_loop_job_register</span><span class=\"params\">(struct netif_lcore_loop_job *lcore_job)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netif_lcore_loop_job</span> *<span class=\"title\">cur</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(<span class=\"literal\">NULL</span> == lcore_job))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_for_each_entry(cur, &amp;netif_lcore_jobs[lcore_job-&gt;type], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == lcore_job) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EDPVS_EXIST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(NETIF_LCORE_JOB_SLOW == lcore_job-&gt;type &amp;&amp; lcore_job-&gt;skip_loops &lt;= <span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_add_tail(&amp;lcore_job-&gt;<span class=\"built_in\">list</span>, &amp;netif_lcore_jobs[lcore_job-&gt;type]);</span><br><span class=\"line\">    <span class=\"comment\">//netif_lcore_jobs 记录job的全局变量，这个在netif_loop用到了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在哪些位置调用了netif_lcore_loop_job_register 注册job，通过阅读源代码，可以发现注册NETIF_LCORE_JOB_LOOP， NETIF_LCORE_JOB_SLOW 这两种类型的job分布在如下所示位置。</p>\n<h2 id=\"NETIF-LCORE-JOB-LOOP-job注册\"><a href=\"#NETIF-LCORE-JOB-LOOP-job注册\" class=\"headerlink\" title=\"NETIF_LCORE_JOB_LOOP job注册\"></a>NETIF_LCORE_JOB_LOOP job注册</h2><p><strong> 第一处： main-&gt;netif_init-&gt;netif_lcore_init函数中：</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* register lcore jobs*/</span></span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">0</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">0</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"recv_fwd\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].func = lcore_job_recv_fwd;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">1</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">1</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"xmit\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].func = lcore_job_xmit;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">2</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">2</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"timer_manage\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].func = lcore_job_timer_manage;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].type = NETIF_LCORE_JOB_LOOP;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 第二处： main-&gt;ctrl_init-&gt;msg_init</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl_lcore_job.func = slave_lcore_loop_func;</span><br><span class=\"line\">ctrl_lcore_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">ctrl_lcore_job.type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((ret = netif_lcore_loop_job_register(&amp;ctrl_lcore_job)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    RTE_LOG(ERR, MSGMGR, <span class=\"string\">\"%s: fail to register ctrl func on slave lcores\\n\"</span>, __func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"NETIF-LCORE-JOB-SLOW-job注册\"><a href=\"#NETIF-LCORE-JOB-SLOW-job注册\" class=\"headerlink\" title=\"NETIF_LCORE_JOB_SLOW job注册\"></a>NETIF_LCORE_JOB_SLOW job注册</h2><p><strong> 第一处： main-&gt;inet_init -&gt; ipv4_init-&gt; ipv4_frag_init </strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frag_job.func = ipv4_frag_job;</span><br><span class=\"line\">frag_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">frag_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class=\"line\">frag_job.skip_loops = IP4_FRAG_FREE_DEATH_ROW_INTERVAL;</span><br><span class=\"line\">err = netif_lcore_loop_job_register(&amp;frag_job);</span><br></pre></td></tr></table></figure></p>\n<p><strong> 第二处： mian-&gt;inet_init -&gt; neigh_init -&gt; arp_init </strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neigh_sync_job.func = neigh_process_ring;</span><br><span class=\"line\">neigh_sync_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">neigh_sync_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class=\"line\">neigh_sync_job.skip_loops = NEIGH_PROCESS_MAC_RING_INTERVAL;</span><br><span class=\"line\">err = netif_lcore_loop_job_register(&amp;neigh_sync_job);</span><br></pre></td></tr></table></figure></p>\n<p><strong> 通过上述分析，那么我们可以知道job的处理流程为 </strong><br>以下流程虽然都要执行，但是函数前后并不是强制依赖，比如lcore_job_timer_manage 不依赖于lcore_job_xmit的执行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcore_job_recv_fwd -&gt; lcore_job_xmit -&gt; lcore_job_timer_manage -&gt; slave_lcore_loop_func -&gt;</span><br><span class=\"line\">ipv4_frag_job -&gt; neigh_process_ring</span><br></pre></td></tr></table></figure></p>\n<p>这些函数的具体功能，将在下一章节进行分析。</p>\n<p>启动过程就到此结束了，若有疑问，欢迎发邮件和我联系。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文用于分析dpvs的启动流程，会对主要逻辑进行解析，忽略了一些边缘代码，比如配置文件解析，函数指针的注册等等。在阅读主逻辑的时候，如果有疑问的地方，再去看一些配置相关，初始化相关的代码。这样不仅高效而且不会那么枯燥。被忽略的代码将在本文中用…代替。</p>\n<h1 id=\"从main函数开始\"><a href=\"#从main函数开始\" class=\"headerlink\" title=\"从main函数开始\"></a>从main函数开始</h1><p>在src/mian.c文件中，main函数还是比较清晰的。首先是初始 -&gt; 然后启动端口 -&gt; 然后启动工作线程 -&gt; 主线程进入循环。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//各种初始化，暂不关心，用到的时候再看。</span></span><br><span class=\"line\">    err = rte_eal_init(argc, argv);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid EAL parameters\\n\"</span>);</span><br><span class=\"line\">    argc -= err, argv += err;</span><br><span class=\"line\"></span><br><span class=\"line\">    rte_timer_subsystem_init();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = cfgfile_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail init configuration file: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_virtual_devices_add()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail add virtual devices:%s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = dpvs_timer_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail init timer on %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = tc_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init traffic control: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_init(<span class=\"literal\">NULL</span>)) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init netif: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\">    <span class=\"comment\">/* Default lcore conf and port conf are used and may be changed here </span></span><br><span class=\"line\"><span class=\"comment\">     * with \"netif_port_conf_update\" and \"netif_lcore_conf_set\" */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init ctrl plane: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = tc_ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init tc control plane: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = vlan_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init vlan: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = inet_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init inet: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = sa_pool_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init sa_pool: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = dp_vs_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init ipvs: %s\\n\"</span>, dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((err = netif_ctrl_init()) != EDPVS_OK)</span><br><span class=\"line\">        rte_exit(EXIT_FAILURE, <span class=\"string\">\"Fail to init netif_ctrl: %s\\n\"</span>,</span><br><span class=\"line\">                 dpvs_strerror(err));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* config and start all available dpdk ports */</span></span><br><span class=\"line\">    nports = rte_eth_dev_count();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pid = <span class=\"number\">0</span>; pid &lt; nports; pid++) &#123;</span><br><span class=\"line\">        dev = netif_port_get(pid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dev) &#123;</span><br><span class=\"line\">            RTE_LOG(WARNING, DPVS, <span class=\"string\">\"port %d not found\\n\"</span>, pid);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//启动端口，配置端口。比如端口，队列，cpu的绑定等等。</span></span><br><span class=\"line\">        err = netif_port_start(dev);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err != EDPVS_OK)</span><br><span class=\"line\">            RTE_LOG(WARNING, DPVS, <span class=\"string\">\"Start %s failed, skipping ...\\n\"</span>,</span><br><span class=\"line\">                    dev-&gt;name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* print port-queue-lcore relation */</span></span><br><span class=\"line\">    netif_print_lcore_conf(pql_conf_buf, &amp;pql_conf_buf_len, <span class=\"literal\">true</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    RTE_LOG(INFO, DPVS, <span class=\"string\">\"\\nport-queue-lcore relation array: \\n%s\\n\"</span>,</span><br><span class=\"line\">            pql_conf_buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* start data plane threads */</span></span><br><span class=\"line\">    netif_lcore_start(); <span class=\"comment\">//这里就是干活的线程，通过跟踪这个函数，最后会调用到netif_loop，即工作线程的loop</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* write pid file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pidfile_write(DPVS_PIDFILE, getpid()))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> end;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer_sched_loop_interval = dpvs_timer_sched_interval_get();</span><br><span class=\"line\">    assert(timer_sched_loop_interval &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    dpvs_state_set(DPVS_STATE_NORMAL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* start control plane thread */</span></span><br><span class=\"line\">    <span class=\"comment\">// 主线程循环，用于处理ctrl plane等消息，这里占不讨论，后续文章再讨论。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* reload configuations if reload flag is set */</span></span><br><span class=\"line\">        try_reload();</span><br><span class=\"line\">        <span class=\"comment\">/* IPC loop */</span></span><br><span class=\"line\">        sockopt_ctl(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* msg loop */</span></span><br><span class=\"line\">        msg_master_process();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* timer */</span></span><br><span class=\"line\">        loop_cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_cnt % timer_sched_loop_interval == <span class=\"number\">0</span>)</span><br><span class=\"line\">            rte_timer_manage();</span><br><span class=\"line\">        <span class=\"comment\">/* kni */</span></span><br><span class=\"line\">        kni_process_on_master();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* process mac ring on master */</span></span><br><span class=\"line\">        neigh_process_ring(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* increase loop counts */</span></span><br><span class=\"line\">        netif_update_master_loop_cnt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"DPVS-dataplane线程，即工作线程\"><a href=\"#DPVS-dataplane线程，即工作线程\" class=\"headerlink\" title=\"DPVS dataplane线程，即工作线程\"></a>DPVS dataplane线程，即工作线程</h1><p>DPVS在netif.c文件中static int netif_loop(void * dummy) 函数中收取，处理和发送数据包。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">netif_loop</span><span class=\"params\">(<span class=\"keyword\">void</span> *dummy)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    try_isol_rxq_lcore_loop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == lcore_conf[lcore2index[cid]].nports) &#123;</span><br><span class=\"line\">        RTE_LOG(INFO, NETIF, <span class=\"string\">\"[%s] Lcore %d has nothing to do.\\n\"</span>, __func__, cid);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_IDLE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里收包和处理CPU分离，是指收包的CPU和处理包的CPU不同，应该是为了增加网卡的吞吐能力吧。</span></span><br><span class=\"line\"><span class=\"comment\">    只有在/etc/dpvs.conf配置文件中配置了isol_rx_cpu_ids才会生效，暂时用不到，在后文中再来分析吧*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_INIT], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">        do_lcore_job(job);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* NETIF_LCORE_JOB_INIT type类型暂时没有用到，忽略之*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">        loop_start = rte_get_timer_cycles();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lcore_stats[cid].lcore_loop++;</span><br><span class=\"line\">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_LOOP], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">            do_lcore_job(job);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++netif_loop_tick[cid];</span><br><span class=\"line\">        list_for_each_entry(job, &amp;netif_lcore_jobs[NETIF_LCORE_JOB_SLOW], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (netif_loop_tick[cid] % job-&gt;skip_loops == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                do_lcore_job(job);</span><br><span class=\"line\">                <span class=\"comment\">//netif_loop_tick[cid] = 0;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* 上面代码有点类似于netfilter处理链，数据包会被处理链的job依次处理, 这些job链放在netif_lcore_jobs 这个全局变量中。</span></span><br><span class=\"line\"><span class=\"comment\">        那么，有哪些job呢，在什么地方初始化这个全局变量的呢？他们的处理顺序是怎么样的？在下一节会有说明*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">        loop_end = rte_get_timer_cycles();</span><br><span class=\"line\">        loop_time = (loop_end - loop_start) * <span class=\"number\">1E6</span> / cycles_per_sec;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_time &gt; longest_lcore_loop[cid]) &#123;</span><br><span class=\"line\">            RTE_LOG(WARNING, NETIF, <span class=\"string\">\"update longest_lcore_loop[%d] = %d (&lt;- %d)\\n\"</span>,</span><br><span class=\"line\">                    cid, loop_time, longest_lcore_loop[cid]);</span><br><span class=\"line\">            longest_lcore_loop[cid] = loop_time;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loop_time &gt; BIG_LOOP_THRESH) &#123;</span><br><span class=\"line\">            print_job_time(buf, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">            RTE_LOG(WARNING, NETIF, <span class=\"string\">\"lcore[%d] loop over %d usecs (actual=%d, max=%d):\\n%s\\n\"</span>,</span><br><span class=\"line\">                    cid, BIG_LOOP_THRESH, loop_time, longest_lcore_loop[cid], buf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">/* CONFIG_RECORD_BIG_LOOP给统计和debug用，暂不关心 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//那么do_lcore_job 做了什么呢？ 其实do_lcore_job就是调用了job结构体中注册的函数指针指向的函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">do_lcore_job</span><span class=\"params\">(struct netif_lcore_loop_job *job)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> job_start, job_end;</span><br><span class=\"line\">    job_start = rte_get_timer_cycles();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    job-&gt;func(job-&gt;data);</span><br><span class=\"line\">    <span class=\"comment\">// 这里就是真正干活的地方了。</span></span><br><span class=\"line\">    <span class=\"comment\">// func 函数指针在main函数中进行了初始化，初始化过程及代码位置在下一节会讲到。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_RECORD_BIG_LOOP</span></span><br><span class=\"line\">    job_end = rte_get_timer_cycles();</span><br><span class=\"line\">    job-&gt;job_time[rte_lcore_id()] = (job_end - job_start) * <span class=\"number\">1E6</span> / cycles_per_sec;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）\"><a href=\"#DPVS-dataplane线程job初始化（-也就是-netif-lcore-jobs-全局变量的初始化）\" class=\"headerlink\" title=\"DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）\"></a>DPVS dataplane线程job初始化（ 也就是 netif_lcore_jobs 全局变量的初始化）</h1><p>目前job的类型为，又有NETIF_LCORE_JOB_LOOP和NETIF_LCORE_JOB_SLOW有用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum netif_lcore_job_type &#123;</span><br><span class=\"line\">    NETIF_LCORE_JOB_INIT      = 0,</span><br><span class=\"line\">    NETIF_LCORE_JOB_LOOP      = 1,</span><br><span class=\"line\">    NETIF_LCORE_JOB_SLOW      = 2,</span><br><span class=\"line\">    NETIF_LCORE_JOB_TYPE_MAX  = 3,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"job注册函数\"><a href=\"#job注册函数\" class=\"headerlink\" title=\"job注册函数\"></a>job注册函数</h2><p>netif_lcore_loop_job_register 函数将job这测到netif_lcore_jobs这个全局变量中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">netif_lcore_loop_job_register</span><span class=\"params\">(struct netif_lcore_loop_job *lcore_job)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netif_lcore_loop_job</span> *<span class=\"title\">cur</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(<span class=\"literal\">NULL</span> == lcore_job))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_for_each_entry(cur, &amp;netif_lcore_jobs[lcore_job-&gt;type], <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == lcore_job) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EDPVS_EXIST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(NETIF_LCORE_JOB_SLOW == lcore_job-&gt;type &amp;&amp; lcore_job-&gt;skip_loops &lt;= <span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_add_tail(&amp;lcore_job-&gt;<span class=\"built_in\">list</span>, &amp;netif_lcore_jobs[lcore_job-&gt;type]);</span><br><span class=\"line\">    <span class=\"comment\">//netif_lcore_jobs 记录job的全局变量，这个在netif_loop用到了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在哪些位置调用了netif_lcore_loop_job_register 注册job，通过阅读源代码，可以发现注册NETIF_LCORE_JOB_LOOP， NETIF_LCORE_JOB_SLOW 这两种类型的job分布在如下所示位置。</p>\n<h2 id=\"NETIF-LCORE-JOB-LOOP-job注册\"><a href=\"#NETIF-LCORE-JOB-LOOP-job注册\" class=\"headerlink\" title=\"NETIF_LCORE_JOB_LOOP job注册\"></a>NETIF_LCORE_JOB_LOOP job注册</h2><p><strong> 第一处： main-&gt;netif_init-&gt;netif_lcore_init函数中：</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* register lcore jobs*/</span></span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">0</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">0</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"recv_fwd\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].func = lcore_job_recv_fwd;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">0</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">1</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">1</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"xmit\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].func = lcore_job_xmit;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">1</span>].type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"built_in\">snprintf</span>(netif_jobs[<span class=\"number\">2</span>].name, <span class=\"keyword\">sizeof</span>(netif_jobs[<span class=\"number\">2</span>].name) - <span class=\"number\">1</span>, <span class=\"string\">\"%s\"</span>, <span class=\"string\">\"timer_manage\"</span>);</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].func = lcore_job_timer_manage;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">netif_jobs[<span class=\"number\">2</span>].type = NETIF_LCORE_JOB_LOOP;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 第二处： main-&gt;ctrl_init-&gt;msg_init</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl_lcore_job.func = slave_lcore_loop_func;</span><br><span class=\"line\">ctrl_lcore_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">ctrl_lcore_job.type = NETIF_LCORE_JOB_LOOP;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((ret = netif_lcore_loop_job_register(&amp;ctrl_lcore_job)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    RTE_LOG(ERR, MSGMGR, <span class=\"string\">\"%s: fail to register ctrl func on slave lcores\\n\"</span>, __func__);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"NETIF-LCORE-JOB-SLOW-job注册\"><a href=\"#NETIF-LCORE-JOB-SLOW-job注册\" class=\"headerlink\" title=\"NETIF_LCORE_JOB_SLOW job注册\"></a>NETIF_LCORE_JOB_SLOW job注册</h2><p><strong> 第一处： main-&gt;inet_init -&gt; ipv4_init-&gt; ipv4_frag_init </strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frag_job.func = ipv4_frag_job;</span><br><span class=\"line\">frag_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">frag_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class=\"line\">frag_job.skip_loops = IP4_FRAG_FREE_DEATH_ROW_INTERVAL;</span><br><span class=\"line\">err = netif_lcore_loop_job_register(&amp;frag_job);</span><br></pre></td></tr></table></figure></p>\n<p><strong> 第二处： mian-&gt;inet_init -&gt; neigh_init -&gt; arp_init </strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neigh_sync_job.func = neigh_process_ring;</span><br><span class=\"line\">neigh_sync_job.data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">neigh_sync_job.type = NETIF_LCORE_JOB_SLOW;</span><br><span class=\"line\">neigh_sync_job.skip_loops = NEIGH_PROCESS_MAC_RING_INTERVAL;</span><br><span class=\"line\">err = netif_lcore_loop_job_register(&amp;neigh_sync_job);</span><br></pre></td></tr></table></figure></p>\n<p><strong> 通过上述分析，那么我们可以知道job的处理流程为 </strong><br>以下流程虽然都要执行，但是函数前后并不是强制依赖，比如lcore_job_timer_manage 不依赖于lcore_job_xmit的执行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcore_job_recv_fwd -&gt; lcore_job_xmit -&gt; lcore_job_timer_manage -&gt; slave_lcore_loop_func -&gt;</span><br><span class=\"line\">ipv4_frag_job -&gt; neigh_process_ring</span><br></pre></td></tr></table></figure></p>\n<p>这些函数的具体功能，将在下一章节进行分析。</p>\n<p>启动过程就到此结束了，若有疑问，欢迎发邮件和我联系。</p>\n"},{"title":"dpvs源码分析（二）之链路层","_content":"\n本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。废话不多说，开始吧。\n\n接**{% post_link dpvs源码分析（一）之启动过程 %}**，我们知道，lcore_job_recv_fwd是首先被调动的函数：\n{% codeblock lang:c %}\nstatic void lcore_job_recv_fwd(void *arg)\n{\n    int i, j;\n    portid_t pid;\n    lcoreid_t cid;\n    struct netif_queue_conf *qconf;\n\n    cid = rte_lcore_id();\n    assert(LCORE_ID_ANY != cid);\n\n    for (i = 0; i < lcore_conf[lcore2index[cid]].nports; i++) {\n        pid = lcore_conf[lcore2index[cid]].pqs[i].id;\n        assert(pid < rte_eth_dev_count());\n\n        for (j = 0; j < lcore_conf[lcore2index[cid]].pqs[i].nrxq; j++) {\n            qconf = &lcore_conf[lcore2index[cid]].pqs[i].rxqs[j];\n            \n            // 从arp_ring获取arp报文，最后调用lcore_process_packets 处理，所以直接看lcore_process_packets这个函数就好了。\n            lcore_process_arp_ring(qconf,cid);\n\n            // 从网卡收包，存放于qconf->mbufs 结构体重，len为包的数量\n            qconf->len = netif_rx_burst(pid, qconf);\n            //统计\n            lcore_stats_burst(&lcore_stats[cid], qconf->len);\n            \n            //处理数据报文，\n            //mbuf会在lcore_process_packets被释放\n            lcore_process_packets(qconf, qconf->mbufs, cid, qconf->len, 1);\n            \n            //将报文发送给Linux kernel\n            kni_send2kern_loop(pid, qconf);\n        }\n    }\n}\n{% endcodeblock %}\n\n{% codeblock lang:c %}\nstatic void lcore_process_packets(struct netif_queue_conf *qconf, struct rte_mbuf **mbufs,\n                      lcoreid_t cid, uint16_t count, bool pretetch)\n{\n    ...\n\n    /* prefetch packets \n    预先将数据包从内存加载到cache，这样有可能加快运行速度*/\n    if (pretetch) {\n        for (t = 0; t < qconf->len && t < NETIF_PKT_PREFETCH_OFFSET; t++)\n            rte_prefetch0(rte_pktmbuf_mtod(qconf->mbufs[t], void *));\n    }\n\n    /* L2 filter */\n    for (i = 0; i < count; i++) {\n        ...\n        /*校验mac地址，如果和物理设备的mac地址一样，被设置为RTE_TYPE_HOST。不一样则被设置为ETH_PKT_OTHERHOST*/\n        /* reuse mbuf.packet_type, it was RTE_PTYPE_XXX */\n        mbuf->packet_type = eth_type_parse(eth_hdr, dev);\n\n        /*\n         * 如果通过dpip命令设置了设备forward2kni on，那么所有的报文都会复制一份给kernel\n         * 所有数据包复制一份通过kni发送给kernel， 原有mbuf不变。\n         */\n        if (dev->flag & NETIF_PORT_FLAG_FORWARD2KNI) {\n            if (likely(NULL != (mbuf_copied = mbuf_copy(mbuf,\n                                pktmbuf_pool[dev->socket]))))\n                kni_ingress(mbuf_copied, dev, qconf);\n            else\n                RTE_LOG(WARNING, NETIF, \"%s: Failed to copy mbuf\\n\",\n                        __func__);\n        }\n\n        /*\n         * handle VLAN\n         * if HW offload vlan strip, it's still need vlan module\n         * to act as VLAN filter.\n         * vlan_rcv会通过vlanid找到对应的dev，然后将dev id复制给mbuf->port_id\n         */\n        if (eth_hdr->ether_type == htons(ETH_P_8021Q) ||\n            mbuf->ol_flags & PKT_RX_VLAN_STRIPPED) {\n            if (vlan_rcv(mbuf, netif_port_get(mbuf->port)) != EDPVS_OK) {\n                rte_pktmbuf_free(mbuf);\n                lcore_stats[cid].dropped++;\n                continue;\n            }\n            /*通过port id找到对应的dev设备*/\n            dev = netif_port_get(mbuf->port);\n            if (unlikely(!dev)) {\n                rte_pktmbuf_free(mbuf);\n                lcore_stats[cid].dropped++;\n                continue;\n            }\n            /*获取二层头*/\n            eth_hdr = rte_pktmbuf_mtod(mbuf, struct ether_hdr *);\n        }\n        /* handler should free mbuf */\n        netif_deliver_mbuf(mbuf, eth_hdr->ether_type, dev, qconf,\n                           (dev->flag & NETIF_PORT_FLAG_FORWARD2KNI) ? true:false,\n                           cid, pkts_from_ring);\n        ...\n    }\n}\n\n/*上文用到了vlan_rcv这里对vlan_rcv做解析*/\nint vlan_rcv(struct rte_mbuf *mbuf, struct netif_port *real_dev)\n{\n    ...\n    // 剥离VLAN tag\n    err = vlan_untag_mbuf(mbuf);\n    if (unlikely(err != EDPVS_OK))\n        return err;\n    // 依据VLAN tag找到对应的VLAN设备\n    dev = vlan_find_dev(real_dev, htons(ETH_P_8021Q),\n                        mbuf_vlan_tag_get_id(mbuf));\n    mbuf->port = dev->id;\n    if (unlikely(mbuf->packet_type == ETH_PKT_OTHERHOST)) {\n\t\t/*这里通过目的地址判断，包是不是发送给vlan的。*/\n        if (eth_addr_equal(&ehdr->d_addr, &dev->addr))\n            mbuf->packet_type = ETH_PKT_HOST/*如果是ETH_PKT_OTHERHOST报文会被丢弃*/;\n    }\n    ...\n}\n{% endcodeblock %}\n\n前面对vlan神马的都处理了，接下来就是二层报文的处理了：\n{% codeblock lang:c %}\nstatic inline int netif_deliver_mbuf(struct rte_mbuf *mbuf,\n                                     uint16_t eth_type,\n                                     struct netif_port *dev,\n                                     struct netif_queue_conf *qconf,\n                                     bool forward2kni,\n                                     lcoreid_t cid,\n                                     bool pkts_from_ring)\n{\n    ...\n    pkt_type注册见下文，这里通过eth_type获取ptk_type\n    其他协议，都会送给linux kernel\n    pt = pkt_type_get(eth_type, dev);\n    if (!forward2kni && NULL == pt) {\n    \t/*通过kni，发送给linux kernel*/\n        kni_ingress(mbuf, dev, qconf);\n        return EDPVS_OK;\n    }\n    ...\n\n    /*clone arp pkt to every queue*/\n    if (pt->type == rte_cpu_to_be_16(ETHER_TYPE_ARP) && !pkts_from_ring/*arp_ring里的报文，肯定不能再入ring了。*/) {\n       /*将arp报文clone到每个队列，每个core维护自己的arp表现*/\n       ...\n    }\n\n   /*Remove len bytes at the beginning of an mbuf. 移除二层头*/\n    if (unlikely(NULL == rte_pktmbuf_adj(mbuf, sizeof(struct ether_hdr))))\n        return EDPVS_INVPKT;\n\n    /*在这里就开始处理上层协议了，目前只会处理ip和arp，也只注册了这两种*/\n    err = pt->func(mbuf, dev);\n\n    if (err == EDPVS_KNICONTINUE) {\n        if (pkts_from_ring) {\n        \t/*pkt_from_ring为arp_ring过来的报文\n        \t* arp_ring过来的报文不再发给linux kernel，因此需要free mubf\n        \t*/\n            rte_pktmbuf_free(mbuf);\n            return EDPVS_OK;\n        }\n\n        if (!forward2kni && likely(NULL != rte_pktmbuf_prepend(mbuf,  (mbuf->data_off - data_off))))\n        \t// 发送给linux kernel\n            kni_ingress(mbuf, dev, qconf);\n    }\n\n    return EDPVS_OK;\n}\n{% endcodeblock %}\n\n不同类型的报文，注册不同的处理函数。\n{% codeblock lang:c %}\nstatic struct pkt_type ip4_pkt_type = {\n    //.type       = rte_cpu_to_be_16(ETHER_TYPE_IPv4),\n    .func       = ipv4_rcv,\n    .port       = NULL,\n};\nip4_pkt_type.type = htons(ETHER_TYPE_IPv4);\n\nstatic struct pkt_type arp_pkt_type = {\n    //.type       = rte_cpu_to_be_16(ETHER_TYPE_ARP),\n    .func       = neigh_resolve_input,\n    .port       = NULL,\n};\narp_pkt_type.type = rte_cpu_to_be_16(ETHER_TYPE_ARP);\n\n{% endcodeblock %}\n目前只有ETHER_TYPE_ARP和ETHER_TYPE_IPv4被注册，也就是说dpvs协议栈目前仅仅会对这两种协议进行处理。其余的协议会通过kni传递个linux kernel。","source":"_posts/dpvs源码分析（二）之链路层.md","raw":"---\ntitle: dpvs源码分析（二）之链路层\ncategories: 网络转发\ntags:\n  - 网络转发\n  - DPVS\n  - DPDK\n---\n\n本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。废话不多说，开始吧。\n\n接**{% post_link dpvs源码分析（一）之启动过程 %}**，我们知道，lcore_job_recv_fwd是首先被调动的函数：\n{% codeblock lang:c %}\nstatic void lcore_job_recv_fwd(void *arg)\n{\n    int i, j;\n    portid_t pid;\n    lcoreid_t cid;\n    struct netif_queue_conf *qconf;\n\n    cid = rte_lcore_id();\n    assert(LCORE_ID_ANY != cid);\n\n    for (i = 0; i < lcore_conf[lcore2index[cid]].nports; i++) {\n        pid = lcore_conf[lcore2index[cid]].pqs[i].id;\n        assert(pid < rte_eth_dev_count());\n\n        for (j = 0; j < lcore_conf[lcore2index[cid]].pqs[i].nrxq; j++) {\n            qconf = &lcore_conf[lcore2index[cid]].pqs[i].rxqs[j];\n            \n            // 从arp_ring获取arp报文，最后调用lcore_process_packets 处理，所以直接看lcore_process_packets这个函数就好了。\n            lcore_process_arp_ring(qconf,cid);\n\n            // 从网卡收包，存放于qconf->mbufs 结构体重，len为包的数量\n            qconf->len = netif_rx_burst(pid, qconf);\n            //统计\n            lcore_stats_burst(&lcore_stats[cid], qconf->len);\n            \n            //处理数据报文，\n            //mbuf会在lcore_process_packets被释放\n            lcore_process_packets(qconf, qconf->mbufs, cid, qconf->len, 1);\n            \n            //将报文发送给Linux kernel\n            kni_send2kern_loop(pid, qconf);\n        }\n    }\n}\n{% endcodeblock %}\n\n{% codeblock lang:c %}\nstatic void lcore_process_packets(struct netif_queue_conf *qconf, struct rte_mbuf **mbufs,\n                      lcoreid_t cid, uint16_t count, bool pretetch)\n{\n    ...\n\n    /* prefetch packets \n    预先将数据包从内存加载到cache，这样有可能加快运行速度*/\n    if (pretetch) {\n        for (t = 0; t < qconf->len && t < NETIF_PKT_PREFETCH_OFFSET; t++)\n            rte_prefetch0(rte_pktmbuf_mtod(qconf->mbufs[t], void *));\n    }\n\n    /* L2 filter */\n    for (i = 0; i < count; i++) {\n        ...\n        /*校验mac地址，如果和物理设备的mac地址一样，被设置为RTE_TYPE_HOST。不一样则被设置为ETH_PKT_OTHERHOST*/\n        /* reuse mbuf.packet_type, it was RTE_PTYPE_XXX */\n        mbuf->packet_type = eth_type_parse(eth_hdr, dev);\n\n        /*\n         * 如果通过dpip命令设置了设备forward2kni on，那么所有的报文都会复制一份给kernel\n         * 所有数据包复制一份通过kni发送给kernel， 原有mbuf不变。\n         */\n        if (dev->flag & NETIF_PORT_FLAG_FORWARD2KNI) {\n            if (likely(NULL != (mbuf_copied = mbuf_copy(mbuf,\n                                pktmbuf_pool[dev->socket]))))\n                kni_ingress(mbuf_copied, dev, qconf);\n            else\n                RTE_LOG(WARNING, NETIF, \"%s: Failed to copy mbuf\\n\",\n                        __func__);\n        }\n\n        /*\n         * handle VLAN\n         * if HW offload vlan strip, it's still need vlan module\n         * to act as VLAN filter.\n         * vlan_rcv会通过vlanid找到对应的dev，然后将dev id复制给mbuf->port_id\n         */\n        if (eth_hdr->ether_type == htons(ETH_P_8021Q) ||\n            mbuf->ol_flags & PKT_RX_VLAN_STRIPPED) {\n            if (vlan_rcv(mbuf, netif_port_get(mbuf->port)) != EDPVS_OK) {\n                rte_pktmbuf_free(mbuf);\n                lcore_stats[cid].dropped++;\n                continue;\n            }\n            /*通过port id找到对应的dev设备*/\n            dev = netif_port_get(mbuf->port);\n            if (unlikely(!dev)) {\n                rte_pktmbuf_free(mbuf);\n                lcore_stats[cid].dropped++;\n                continue;\n            }\n            /*获取二层头*/\n            eth_hdr = rte_pktmbuf_mtod(mbuf, struct ether_hdr *);\n        }\n        /* handler should free mbuf */\n        netif_deliver_mbuf(mbuf, eth_hdr->ether_type, dev, qconf,\n                           (dev->flag & NETIF_PORT_FLAG_FORWARD2KNI) ? true:false,\n                           cid, pkts_from_ring);\n        ...\n    }\n}\n\n/*上文用到了vlan_rcv这里对vlan_rcv做解析*/\nint vlan_rcv(struct rte_mbuf *mbuf, struct netif_port *real_dev)\n{\n    ...\n    // 剥离VLAN tag\n    err = vlan_untag_mbuf(mbuf);\n    if (unlikely(err != EDPVS_OK))\n        return err;\n    // 依据VLAN tag找到对应的VLAN设备\n    dev = vlan_find_dev(real_dev, htons(ETH_P_8021Q),\n                        mbuf_vlan_tag_get_id(mbuf));\n    mbuf->port = dev->id;\n    if (unlikely(mbuf->packet_type == ETH_PKT_OTHERHOST)) {\n\t\t/*这里通过目的地址判断，包是不是发送给vlan的。*/\n        if (eth_addr_equal(&ehdr->d_addr, &dev->addr))\n            mbuf->packet_type = ETH_PKT_HOST/*如果是ETH_PKT_OTHERHOST报文会被丢弃*/;\n    }\n    ...\n}\n{% endcodeblock %}\n\n前面对vlan神马的都处理了，接下来就是二层报文的处理了：\n{% codeblock lang:c %}\nstatic inline int netif_deliver_mbuf(struct rte_mbuf *mbuf,\n                                     uint16_t eth_type,\n                                     struct netif_port *dev,\n                                     struct netif_queue_conf *qconf,\n                                     bool forward2kni,\n                                     lcoreid_t cid,\n                                     bool pkts_from_ring)\n{\n    ...\n    pkt_type注册见下文，这里通过eth_type获取ptk_type\n    其他协议，都会送给linux kernel\n    pt = pkt_type_get(eth_type, dev);\n    if (!forward2kni && NULL == pt) {\n    \t/*通过kni，发送给linux kernel*/\n        kni_ingress(mbuf, dev, qconf);\n        return EDPVS_OK;\n    }\n    ...\n\n    /*clone arp pkt to every queue*/\n    if (pt->type == rte_cpu_to_be_16(ETHER_TYPE_ARP) && !pkts_from_ring/*arp_ring里的报文，肯定不能再入ring了。*/) {\n       /*将arp报文clone到每个队列，每个core维护自己的arp表现*/\n       ...\n    }\n\n   /*Remove len bytes at the beginning of an mbuf. 移除二层头*/\n    if (unlikely(NULL == rte_pktmbuf_adj(mbuf, sizeof(struct ether_hdr))))\n        return EDPVS_INVPKT;\n\n    /*在这里就开始处理上层协议了，目前只会处理ip和arp，也只注册了这两种*/\n    err = pt->func(mbuf, dev);\n\n    if (err == EDPVS_KNICONTINUE) {\n        if (pkts_from_ring) {\n        \t/*pkt_from_ring为arp_ring过来的报文\n        \t* arp_ring过来的报文不再发给linux kernel，因此需要free mubf\n        \t*/\n            rte_pktmbuf_free(mbuf);\n            return EDPVS_OK;\n        }\n\n        if (!forward2kni && likely(NULL != rte_pktmbuf_prepend(mbuf,  (mbuf->data_off - data_off))))\n        \t// 发送给linux kernel\n            kni_ingress(mbuf, dev, qconf);\n    }\n\n    return EDPVS_OK;\n}\n{% endcodeblock %}\n\n不同类型的报文，注册不同的处理函数。\n{% codeblock lang:c %}\nstatic struct pkt_type ip4_pkt_type = {\n    //.type       = rte_cpu_to_be_16(ETHER_TYPE_IPv4),\n    .func       = ipv4_rcv,\n    .port       = NULL,\n};\nip4_pkt_type.type = htons(ETHER_TYPE_IPv4);\n\nstatic struct pkt_type arp_pkt_type = {\n    //.type       = rte_cpu_to_be_16(ETHER_TYPE_ARP),\n    .func       = neigh_resolve_input,\n    .port       = NULL,\n};\narp_pkt_type.type = rte_cpu_to_be_16(ETHER_TYPE_ARP);\n\n{% endcodeblock %}\n目前只有ETHER_TYPE_ARP和ETHER_TYPE_IPv4被注册，也就是说dpvs协议栈目前仅仅会对这两种协议进行处理。其余的协议会通过kni传递个linux kernel。","slug":"dpvs源码分析（二）之链路层","published":1,"date":"2018-01-29T08:08:03.698Z","updated":"2018-01-29T08:08:34.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96ogn000364jhffsgkzg0","content":"<p>本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。废话不多说，开始吧。</p>\n<p>接<strong><a href=\"/2018/01/15/dpvs源码分析（一）之启动过程/\" title=\"dpvs源码分析（一）之启动过程\">dpvs源码分析（一）之启动过程</a></strong>，我们知道，lcore_job_recv_fwd是首先被调动的函数：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lcore_job_recv_fwd</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">portid_t</span> pid;</span><br><span class=\"line\">    <span class=\"keyword\">lcoreid_t</span> cid;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netif_queue_conf</span> *<span class=\"title\">qconf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cid = rte_lcore_id();</span><br><span class=\"line\">    assert(LCORE_ID_ANY != cid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lcore_conf[lcore2index[cid]].nports; i++) &#123;</span><br><span class=\"line\">        pid = lcore_conf[lcore2index[cid]].pqs[i].id;</span><br><span class=\"line\">        assert(pid &lt; rte_eth_dev_count());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; lcore_conf[lcore2index[cid]].pqs[i].nrxq; j++) &#123;</span><br><span class=\"line\">            qconf = &amp;lcore_conf[lcore2index[cid]].pqs[i].rxqs[j];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 从arp_ring获取arp报文，最后调用lcore_process_packets 处理，所以直接看lcore_process_packets这个函数就好了。</span></span><br><span class=\"line\">            lcore_process_arp_ring(qconf,cid);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 从网卡收包，存放于qconf-&gt;mbufs 结构体重，len为包的数量</span></span><br><span class=\"line\">            qconf-&gt;len = netif_rx_burst(pid, qconf);</span><br><span class=\"line\">            <span class=\"comment\">//统计</span></span><br><span class=\"line\">            lcore_stats_burst(&amp;lcore_stats[cid], qconf-&gt;len);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//处理数据报文，</span></span><br><span class=\"line\">            <span class=\"comment\">//mbuf会在lcore_process_packets被释放</span></span><br><span class=\"line\">            lcore_process_packets(qconf, qconf-&gt;mbufs, cid, qconf-&gt;len, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//将报文发送给Linux kernel</span></span><br><span class=\"line\">            kni_send2kern_loop(pid, qconf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lcore_process_packets</span><span class=\"params\">(struct netif_queue_conf *qconf, struct rte_mbuf **mbufs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">lcoreid_t</span> cid, <span class=\"keyword\">uint16_t</span> count, <span class=\"keyword\">bool</span> pretetch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* prefetch packets </span></span><br><span class=\"line\"><span class=\"comment\">    预先将数据包从内存加载到cache，这样有可能加快运行速度*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pretetch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (t = <span class=\"number\">0</span>; t &lt; qconf-&gt;len &amp;&amp; t &lt; NETIF_PKT_PREFETCH_OFFSET; t++)</span><br><span class=\"line\">            rte_prefetch0(rte_pktmbuf_mtod(qconf-&gt;mbufs[t], <span class=\"keyword\">void</span> *));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* L2 filter */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">/*校验mac地址，如果和物理设备的mac地址一样，被设置为RTE_TYPE_HOST。不一样则被设置为ETH_PKT_OTHERHOST*/</span></span><br><span class=\"line\">        <span class=\"comment\">/* reuse mbuf.packet_type, it was RTE_PTYPE_XXX */</span></span><br><span class=\"line\">        mbuf-&gt;packet_type = eth_type_parse(eth_hdr, dev);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果通过dpip命令设置了设备forward2kni on，那么所有的报文都会复制一份给kernel</span></span><br><span class=\"line\"><span class=\"comment\">         * 所有数据包复制一份通过kni发送给kernel， 原有mbuf不变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (likely(<span class=\"literal\">NULL</span> != (mbuf_copied = mbuf_copy(mbuf,</span><br><span class=\"line\">                                pktmbuf_pool[dev-&gt;socket]))))</span><br><span class=\"line\">                kni_ingress(mbuf_copied, dev, qconf);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                RTE_LOG(WARNING, NETIF, <span class=\"string\">\"%s: Failed to copy mbuf\\n\"</span>,</span><br><span class=\"line\">                        __func__);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * handle VLAN</span></span><br><span class=\"line\"><span class=\"comment\">         * if HW offload vlan strip, it's still need vlan module</span></span><br><span class=\"line\"><span class=\"comment\">         * to act as VLAN filter.</span></span><br><span class=\"line\"><span class=\"comment\">         * vlan_rcv会通过vlanid找到对应的dev，然后将dev id复制给mbuf-&gt;port_id</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eth_hdr-&gt;ether_type == htons(ETH_P_8021Q) ||</span><br><span class=\"line\">            mbuf-&gt;ol_flags &amp; PKT_RX_VLAN_STRIPPED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vlan_rcv(mbuf, netif_port_get(mbuf-&gt;port)) != EDPVS_OK) &#123;</span><br><span class=\"line\">                rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">                lcore_stats[cid].dropped++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*通过port id找到对应的dev设备*/</span></span><br><span class=\"line\">            dev = netif_port_get(mbuf-&gt;port);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unlikely(!dev)) &#123;</span><br><span class=\"line\">                rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">                lcore_stats[cid].dropped++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*获取二层头*/</span></span><br><span class=\"line\">            eth_hdr = rte_pktmbuf_mtod(mbuf, struct ether_hdr *);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* handler should free mbuf */</span></span><br><span class=\"line\">        netif_deliver_mbuf(mbuf, eth_hdr-&gt;ether_type, dev, qconf,</span><br><span class=\"line\">                           (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) ? <span class=\"literal\">true</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                           cid, pkts_from_ring);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*上文用到了vlan_rcv这里对vlan_rcv做解析*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">vlan_rcv</span><span class=\"params\">(struct rte_mbuf *mbuf, struct netif_port *real_dev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 剥离VLAN tag</span></span><br><span class=\"line\">    err = vlan_untag_mbuf(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(err != EDPVS_OK))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">    <span class=\"comment\">// 依据VLAN tag找到对应的VLAN设备</span></span><br><span class=\"line\">    dev = vlan_find_dev(real_dev, htons(ETH_P_8021Q),</span><br><span class=\"line\">                        mbuf_vlan_tag_get_id(mbuf));</span><br><span class=\"line\">    mbuf-&gt;port = dev-&gt;id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(mbuf-&gt;packet_type == ETH_PKT_OTHERHOST)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*这里通过目的地址判断，包是不是发送给vlan的。*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eth_addr_equal(&amp;ehdr-&gt;d_addr, &amp;dev-&gt;addr))</span><br><span class=\"line\">            mbuf-&gt;packet_type = ETH_PKT_HOST<span class=\"comment\">/*如果是ETH_PKT_OTHERHOST报文会被丢弃*/</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面对vlan神马的都处理了，接下来就是二层报文的处理了：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">netif_deliver_mbuf</span><span class=\"params\">(struct rte_mbuf *mbuf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">uint16_t</span> eth_type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     struct netif_port *dev,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     struct netif_queue_conf *qconf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">bool</span> forward2kni,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">lcoreid_t</span> cid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">bool</span> pkts_from_ring)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    pkt_type注册见下文，这里通过eth_type获取ptk_type</span><br><span class=\"line\">    其他协议，都会送给linux kernel</span><br><span class=\"line\">    pt = pkt_type_get(eth_type, dev);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!forward2kni &amp;&amp; <span class=\"literal\">NULL</span> == pt) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">/*通过kni，发送给linux kernel*/</span></span><br><span class=\"line\">        kni_ingress(mbuf, dev, qconf);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*clone arp pkt to every queue*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pt-&gt;type == rte_cpu_to_be_16(ETHER_TYPE_ARP) &amp;&amp; !pkts_from_ring<span class=\"comment\">/*arp_ring里的报文，肯定不能再入ring了。*/</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">/*将arp报文clone到每个队列，每个core维护自己的arp表现*/</span></span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*Remove len bytes at the beginning of an mbuf. 移除二层头*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(<span class=\"literal\">NULL</span> == rte_pktmbuf_adj(mbuf, <span class=\"keyword\">sizeof</span>(struct ether_hdr))))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVPKT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*在这里就开始处理上层协议了，目前只会处理ip和arp，也只注册了这两种*/</span></span><br><span class=\"line\">    err = pt-&gt;func(mbuf, dev);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == EDPVS_KNICONTINUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pkts_from_ring) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">/*pkt_from_ring为arp_ring过来的报文</span></span><br><span class=\"line\"><span class=\"comment\">        \t* arp_ring过来的报文不再发给linux kernel，因此需要free mubf</span></span><br><span class=\"line\"><span class=\"comment\">        \t*/</span></span><br><span class=\"line\">            rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!forward2kni &amp;&amp; likely(<span class=\"literal\">NULL</span> != rte_pktmbuf_prepend(mbuf,  (mbuf-&gt;data_off - data_off))))</span><br><span class=\"line\">        \t<span class=\"comment\">// 发送给linux kernel</span></span><br><span class=\"line\">            kni_ingress(mbuf, dev, qconf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不同类型的报文，注册不同的处理函数。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pkt_type</span> <span class=\"title\">ip4_pkt_type</span> = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//.type       = rte_cpu_to_be_16(ETHER_TYPE_IPv4),</span></span><br><span class=\"line\">    .func       = ipv4_rcv,</span><br><span class=\"line\">    .port       = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ip4_pkt_type.type = htons(ETHER_TYPE_IPv4);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pkt_type</span> <span class=\"title\">arp_pkt_type</span> = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//.type       = rte_cpu_to_be_16(ETHER_TYPE_ARP),</span></span><br><span class=\"line\">    .func       = neigh_resolve_input,</span><br><span class=\"line\">    .port       = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arp_pkt_type.type = rte_cpu_to_be_16(ETHER_TYPE_ARP);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>目前只有ETHER_TYPE_ARP和ETHER_TYPE_IPv4被注册，也就是说dpvs协议栈目前仅仅会对这两种协议进行处理。其余的协议会通过kni传递个linux kernel。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文仅仅概述dpvs二三层协议栈的处理流程，只会对重点函数和流程分析，以避免刚刚接触DPVS的同学被这些细节扰乱视听。后面的章节将会针对于某个某块进行重点分析。废话不多说，开始吧。</p>\n<p>接<strong><a href=\"/2018/01/15/dpvs源码分析（一）之启动过程/\" title=\"dpvs源码分析（一）之启动过程\">dpvs源码分析（一）之启动过程</a></strong>，我们知道，lcore_job_recv_fwd是首先被调动的函数：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lcore_job_recv_fwd</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">portid_t</span> pid;</span><br><span class=\"line\">    <span class=\"keyword\">lcoreid_t</span> cid;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netif_queue_conf</span> *<span class=\"title\">qconf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cid = rte_lcore_id();</span><br><span class=\"line\">    assert(LCORE_ID_ANY != cid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lcore_conf[lcore2index[cid]].nports; i++) &#123;</span><br><span class=\"line\">        pid = lcore_conf[lcore2index[cid]].pqs[i].id;</span><br><span class=\"line\">        assert(pid &lt; rte_eth_dev_count());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; lcore_conf[lcore2index[cid]].pqs[i].nrxq; j++) &#123;</span><br><span class=\"line\">            qconf = &amp;lcore_conf[lcore2index[cid]].pqs[i].rxqs[j];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 从arp_ring获取arp报文，最后调用lcore_process_packets 处理，所以直接看lcore_process_packets这个函数就好了。</span></span><br><span class=\"line\">            lcore_process_arp_ring(qconf,cid);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 从网卡收包，存放于qconf-&gt;mbufs 结构体重，len为包的数量</span></span><br><span class=\"line\">            qconf-&gt;len = netif_rx_burst(pid, qconf);</span><br><span class=\"line\">            <span class=\"comment\">//统计</span></span><br><span class=\"line\">            lcore_stats_burst(&amp;lcore_stats[cid], qconf-&gt;len);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//处理数据报文，</span></span><br><span class=\"line\">            <span class=\"comment\">//mbuf会在lcore_process_packets被释放</span></span><br><span class=\"line\">            lcore_process_packets(qconf, qconf-&gt;mbufs, cid, qconf-&gt;len, <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//将报文发送给Linux kernel</span></span><br><span class=\"line\">            kni_send2kern_loop(pid, qconf);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lcore_process_packets</span><span class=\"params\">(struct netif_queue_conf *qconf, struct rte_mbuf **mbufs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      <span class=\"keyword\">lcoreid_t</span> cid, <span class=\"keyword\">uint16_t</span> count, <span class=\"keyword\">bool</span> pretetch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* prefetch packets </span></span><br><span class=\"line\"><span class=\"comment\">    预先将数据包从内存加载到cache，这样有可能加快运行速度*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pretetch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (t = <span class=\"number\">0</span>; t &lt; qconf-&gt;len &amp;&amp; t &lt; NETIF_PKT_PREFETCH_OFFSET; t++)</span><br><span class=\"line\">            rte_prefetch0(rte_pktmbuf_mtod(qconf-&gt;mbufs[t], <span class=\"keyword\">void</span> *));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* L2 filter */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">/*校验mac地址，如果和物理设备的mac地址一样，被设置为RTE_TYPE_HOST。不一样则被设置为ETH_PKT_OTHERHOST*/</span></span><br><span class=\"line\">        <span class=\"comment\">/* reuse mbuf.packet_type, it was RTE_PTYPE_XXX */</span></span><br><span class=\"line\">        mbuf-&gt;packet_type = eth_type_parse(eth_hdr, dev);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果通过dpip命令设置了设备forward2kni on，那么所有的报文都会复制一份给kernel</span></span><br><span class=\"line\"><span class=\"comment\">         * 所有数据包复制一份通过kni发送给kernel， 原有mbuf不变。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (likely(<span class=\"literal\">NULL</span> != (mbuf_copied = mbuf_copy(mbuf,</span><br><span class=\"line\">                                pktmbuf_pool[dev-&gt;socket]))))</span><br><span class=\"line\">                kni_ingress(mbuf_copied, dev, qconf);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                RTE_LOG(WARNING, NETIF, <span class=\"string\">\"%s: Failed to copy mbuf\\n\"</span>,</span><br><span class=\"line\">                        __func__);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * handle VLAN</span></span><br><span class=\"line\"><span class=\"comment\">         * if HW offload vlan strip, it's still need vlan module</span></span><br><span class=\"line\"><span class=\"comment\">         * to act as VLAN filter.</span></span><br><span class=\"line\"><span class=\"comment\">         * vlan_rcv会通过vlanid找到对应的dev，然后将dev id复制给mbuf-&gt;port_id</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eth_hdr-&gt;ether_type == htons(ETH_P_8021Q) ||</span><br><span class=\"line\">            mbuf-&gt;ol_flags &amp; PKT_RX_VLAN_STRIPPED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vlan_rcv(mbuf, netif_port_get(mbuf-&gt;port)) != EDPVS_OK) &#123;</span><br><span class=\"line\">                rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">                lcore_stats[cid].dropped++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*通过port id找到对应的dev设备*/</span></span><br><span class=\"line\">            dev = netif_port_get(mbuf-&gt;port);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (unlikely(!dev)) &#123;</span><br><span class=\"line\">                rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">                lcore_stats[cid].dropped++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*获取二层头*/</span></span><br><span class=\"line\">            eth_hdr = rte_pktmbuf_mtod(mbuf, struct ether_hdr *);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* handler should free mbuf */</span></span><br><span class=\"line\">        netif_deliver_mbuf(mbuf, eth_hdr-&gt;ether_type, dev, qconf,</span><br><span class=\"line\">                           (dev-&gt;flag &amp; NETIF_PORT_FLAG_FORWARD2KNI) ? <span class=\"literal\">true</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                           cid, pkts_from_ring);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*上文用到了vlan_rcv这里对vlan_rcv做解析*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">vlan_rcv</span><span class=\"params\">(struct rte_mbuf *mbuf, struct netif_port *real_dev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 剥离VLAN tag</span></span><br><span class=\"line\">    err = vlan_untag_mbuf(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(err != EDPVS_OK))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">    <span class=\"comment\">// 依据VLAN tag找到对应的VLAN设备</span></span><br><span class=\"line\">    dev = vlan_find_dev(real_dev, htons(ETH_P_8021Q),</span><br><span class=\"line\">                        mbuf_vlan_tag_get_id(mbuf));</span><br><span class=\"line\">    mbuf-&gt;port = dev-&gt;id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(mbuf-&gt;packet_type == ETH_PKT_OTHERHOST)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*这里通过目的地址判断，包是不是发送给vlan的。*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eth_addr_equal(&amp;ehdr-&gt;d_addr, &amp;dev-&gt;addr))</span><br><span class=\"line\">            mbuf-&gt;packet_type = ETH_PKT_HOST<span class=\"comment\">/*如果是ETH_PKT_OTHERHOST报文会被丢弃*/</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面对vlan神马的都处理了，接下来就是二层报文的处理了：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">netif_deliver_mbuf</span><span class=\"params\">(struct rte_mbuf *mbuf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">uint16_t</span> eth_type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     struct netif_port *dev,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     struct netif_queue_conf *qconf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">bool</span> forward2kni,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">lcoreid_t</span> cid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">bool</span> pkts_from_ring)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    pkt_type注册见下文，这里通过eth_type获取ptk_type</span><br><span class=\"line\">    其他协议，都会送给linux kernel</span><br><span class=\"line\">    pt = pkt_type_get(eth_type, dev);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!forward2kni &amp;&amp; <span class=\"literal\">NULL</span> == pt) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">/*通过kni，发送给linux kernel*/</span></span><br><span class=\"line\">        kni_ingress(mbuf, dev, qconf);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*clone arp pkt to every queue*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pt-&gt;type == rte_cpu_to_be_16(ETHER_TYPE_ARP) &amp;&amp; !pkts_from_ring<span class=\"comment\">/*arp_ring里的报文，肯定不能再入ring了。*/</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">/*将arp报文clone到每个队列，每个core维护自己的arp表现*/</span></span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*Remove len bytes at the beginning of an mbuf. 移除二层头*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(<span class=\"literal\">NULL</span> == rte_pktmbuf_adj(mbuf, <span class=\"keyword\">sizeof</span>(struct ether_hdr))))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_INVPKT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*在这里就开始处理上层协议了，目前只会处理ip和arp，也只注册了这两种*/</span></span><br><span class=\"line\">    err = pt-&gt;func(mbuf, dev);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err == EDPVS_KNICONTINUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pkts_from_ring) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">/*pkt_from_ring为arp_ring过来的报文</span></span><br><span class=\"line\"><span class=\"comment\">        \t* arp_ring过来的报文不再发给linux kernel，因此需要free mubf</span></span><br><span class=\"line\"><span class=\"comment\">        \t*/</span></span><br><span class=\"line\">            rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!forward2kni &amp;&amp; likely(<span class=\"literal\">NULL</span> != rte_pktmbuf_prepend(mbuf,  (mbuf-&gt;data_off - data_off))))</span><br><span class=\"line\">        \t<span class=\"comment\">// 发送给linux kernel</span></span><br><span class=\"line\">            kni_ingress(mbuf, dev, qconf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不同类型的报文，注册不同的处理函数。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pkt_type</span> <span class=\"title\">ip4_pkt_type</span> = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//.type       = rte_cpu_to_be_16(ETHER_TYPE_IPv4),</span></span><br><span class=\"line\">    .func       = ipv4_rcv,</span><br><span class=\"line\">    .port       = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ip4_pkt_type.type = htons(ETHER_TYPE_IPv4);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pkt_type</span> <span class=\"title\">arp_pkt_type</span> = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//.type       = rte_cpu_to_be_16(ETHER_TYPE_ARP),</span></span><br><span class=\"line\">    .func       = neigh_resolve_input,</span><br><span class=\"line\">    .port       = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arp_pkt_type.type = rte_cpu_to_be_16(ETHER_TYPE_ARP);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>目前只有ETHER_TYPE_ARP和ETHER_TYPE_IPv4被注册，也就是说dpvs协议栈目前仅仅会对这两种协议进行处理。其余的协议会通过kni传递个linux kernel。</p>\n"},{"title":"ospf lsa理解（转）","_content":"OSPF的区域类型和LSA类型这两个知识点，经常容易导致人们对他们理解上的混乱，今天就来谈谈这两个概念。\n本文将会以下面这个拓扑图为例进行讲解。\n\n# LSA Type，链路状态通告的类型\n本来想先讲区域类型，但是由于要理解不同类型的区域，必然要涉及到不同类型的LSA，现在把LSA放到前面先讲。\n我们这里谈谈常见的几种LSA：1、2、3、4、5、7类LSA。\n\n## 1类LSA，路由器LSA。\nOSPF网络中所有路由器都会产生1类LSA，他的意思就是表示路由器自己在本区域内的直连链路信息。该LSA仅在本区域内传播。其中，Link ID跟ADV Router写的都是该路由器的RouterID。\n下图为1类LSA：\n\n## 2类LSA，网络LSA。\n在广播或者非广播模式下（NBMA）由DR生成。该LSA仅在本区域内传播。2类LSA表达的意思应该是：某区域内，在广播或非广播的网段内选举了DR，于是DR在本区域范围利用2类LSA来进行通告。该LSA仅在本区域内传播。其中，该LSA的Link ID就是该DR的接口IP地址，而ADV Router则是DR的Router ID。\n\n## 3类LSA，网络汇总LSA。\n由区域边界路由器ABR生成，用于将一个区域内的网络通告给OSPF中的其他区域。可以认为3类LSA保存着本区域以外的所有其他区域的网络。举个例子，在多区域的环境如1-0-2这样的三个区域，含有area1和area0的ABR会把area1的网络以3类LSA的形式通告给area0，当然它也会把area0里面的网络通告给area1。那么，area1里面的网络又是如何通告到area2呢？这里就要考虑到area1那些一开始被转换成3类LSA的网络，是如何进入到area2的问题了。当原先这个3类LSA进入到area0跟area2的边界路由器时，位于这个边界的ABR就把这条包含着area1链路信息的3类LSA进行修改，修改的内容是把里面的ADV Router替换成自己的Router ID，并且维持原先的Link ID不变，然后把这条修改后的LSA通告给area2，这个就是3类LSA的工作过程。\n\n## 4类LSA，ASBR汇总LSA。\n4类LSA跟5类LSA是紧密联系在一起的，可以说4类LSA是由于5类LSA的存在而产生的。4类LSA由距离本路由器最近的ABR生成，这句话应该要这样来理解：如果路由器想要找到包含了外部路由的那台ASBR（自治系统边界路由器）的话，你应该要到达哪台ABR，这台ABR的Router ID就写在该LSA的ADV Router里面，而LSA里面的Link ID代表的是该ASBR的Router ID。\n\n## 5类LSA，外部的LSA。\n5类LSA由包含了外部路由的ASBR产生，目标是把某外部路由通告给OSPF进程的所有区域（特殊区域除外，下面会提到）。5类LSA可以穿越所有区域，意思是在跨区域通告时，该LSA的Link ID和ADV Router一直保持不变。通俗一点来说，就像是该ASBR对OSPF全网络的所有路由器说，我有这个外部路由，想去的话就来找我吧！其中，Link ID代表的是那台ASBR所引入的网络，ADV Router则是该ASBR的Router ID。\n下图为5类LSA：\n\n## 7类LSA\n7类LSA是一种由NSSA区域中引入了外部路由的路由器生成的LSA，他仅在NSSA本区域内传播。由于NSSA区域不允许外部的路由进来从而禁止了5类LSA，那么为了能够把自己的外部路由传播出去，于是使用了7类LSA来代替5类LSA的功能。值得注意的一点是，当这种7类LSA到达NSSA跟其他区域的边界后，该边界路由器会根据这条7类LSA。生成对应的5类LSA然后继续传播给其他区域。此时，这条5类的LSA里面的Link ID跟7类LSA一样，都是该外部网络地址，而ADV Router则变成了该边界路由器的Router ID，因为这条5类LSA本来就是边界路由器产生的。这里要注意的一点是，该5类LSA里面的Forwarding Address还是保持跟之前的7类LSA的Forwarding Address一样。\n\n# Area Type，区域类型\nOSPF的区域类型分为5种：Backbone area(area 0)、Standard area、Stub area、Totally stubby area、No so stubby area(NSSA)。下面来逐一介绍。\n\n## 1、Backbone area\n也叫骨干区域，其实就是area 0。根据OSPF的设计原则，area 0在OSPF网络中起着中心节点的作用，其他区域的链路信息通过area 0来进行相互传递，这也意味着所有其他区域都必须跟area 0相连。该区域支持1、2、3、4、5类LSA。\n\n## 2、Standard area\n也叫标准区域，标准区域的意思就是在这个区域里面可以正常传递OSPF各类报文。该区域支持1、2、3、4、5类LSA。\n\n## 3、Stub area\n也叫末节区域，所谓末节区域，意思就是该区域不接受非OSPF网络的任何外部路由（external route），它如果要到达那些外部路由的时候，只需要通过默认路由把它发出去就可以了。该区域支持1、2、3类LSA。\n\n## 4、Totally stubby area\n也叫完全末节区域，他的意思是该区域非但不接受外部路由，也不接受自己本区域以外的其他区域的链路信息。它如果要到达本区域以外的目标网络的时候，也是跟末节区域一样，直接把报文通过默认路由发出去。这里要注意的是，由于默认路由是用3类LSA发送的，所以完全末节区域虽然不允许普通的3类LSA报文，但是支持这种包含默认路由的3类LSA。该区域支持1、2类LSA，以及包含默认路由的3类LSA。\n\n## 5、No so stubby area\n就是平时所说的NSSA了，这个NSSA其实是从stub区域发展而来的，它的意思是在含有stub区域的条件下，还拥有可以发送外部路由出去给其他区域的能力。该区域支持1、2、3、7类LSA。这里注意一点的是，NSSA区域还有另外一种模式，那就是是完全末节区域模式的NSSA。这个模式其实就是在完全末节区域环境下允许引入外部路由，这种区域模式支持1、2类LSA以及包含默认路由的3类LSA。\n\n# 配置\n```\narea 24 stub\narea 24 stub no-summary\n```\n","source":"_posts/lsa.md","raw":"---\ntitle: ospf lsa理解（转）\ncategories: ospf\ntags:\n  - ospf\n---\nOSPF的区域类型和LSA类型这两个知识点，经常容易导致人们对他们理解上的混乱，今天就来谈谈这两个概念。\n本文将会以下面这个拓扑图为例进行讲解。\n\n# LSA Type，链路状态通告的类型\n本来想先讲区域类型，但是由于要理解不同类型的区域，必然要涉及到不同类型的LSA，现在把LSA放到前面先讲。\n我们这里谈谈常见的几种LSA：1、2、3、4、5、7类LSA。\n\n## 1类LSA，路由器LSA。\nOSPF网络中所有路由器都会产生1类LSA，他的意思就是表示路由器自己在本区域内的直连链路信息。该LSA仅在本区域内传播。其中，Link ID跟ADV Router写的都是该路由器的RouterID。\n下图为1类LSA：\n\n## 2类LSA，网络LSA。\n在广播或者非广播模式下（NBMA）由DR生成。该LSA仅在本区域内传播。2类LSA表达的意思应该是：某区域内，在广播或非广播的网段内选举了DR，于是DR在本区域范围利用2类LSA来进行通告。该LSA仅在本区域内传播。其中，该LSA的Link ID就是该DR的接口IP地址，而ADV Router则是DR的Router ID。\n\n## 3类LSA，网络汇总LSA。\n由区域边界路由器ABR生成，用于将一个区域内的网络通告给OSPF中的其他区域。可以认为3类LSA保存着本区域以外的所有其他区域的网络。举个例子，在多区域的环境如1-0-2这样的三个区域，含有area1和area0的ABR会把area1的网络以3类LSA的形式通告给area0，当然它也会把area0里面的网络通告给area1。那么，area1里面的网络又是如何通告到area2呢？这里就要考虑到area1那些一开始被转换成3类LSA的网络，是如何进入到area2的问题了。当原先这个3类LSA进入到area0跟area2的边界路由器时，位于这个边界的ABR就把这条包含着area1链路信息的3类LSA进行修改，修改的内容是把里面的ADV Router替换成自己的Router ID，并且维持原先的Link ID不变，然后把这条修改后的LSA通告给area2，这个就是3类LSA的工作过程。\n\n## 4类LSA，ASBR汇总LSA。\n4类LSA跟5类LSA是紧密联系在一起的，可以说4类LSA是由于5类LSA的存在而产生的。4类LSA由距离本路由器最近的ABR生成，这句话应该要这样来理解：如果路由器想要找到包含了外部路由的那台ASBR（自治系统边界路由器）的话，你应该要到达哪台ABR，这台ABR的Router ID就写在该LSA的ADV Router里面，而LSA里面的Link ID代表的是该ASBR的Router ID。\n\n## 5类LSA，外部的LSA。\n5类LSA由包含了外部路由的ASBR产生，目标是把某外部路由通告给OSPF进程的所有区域（特殊区域除外，下面会提到）。5类LSA可以穿越所有区域，意思是在跨区域通告时，该LSA的Link ID和ADV Router一直保持不变。通俗一点来说，就像是该ASBR对OSPF全网络的所有路由器说，我有这个外部路由，想去的话就来找我吧！其中，Link ID代表的是那台ASBR所引入的网络，ADV Router则是该ASBR的Router ID。\n下图为5类LSA：\n\n## 7类LSA\n7类LSA是一种由NSSA区域中引入了外部路由的路由器生成的LSA，他仅在NSSA本区域内传播。由于NSSA区域不允许外部的路由进来从而禁止了5类LSA，那么为了能够把自己的外部路由传播出去，于是使用了7类LSA来代替5类LSA的功能。值得注意的一点是，当这种7类LSA到达NSSA跟其他区域的边界后，该边界路由器会根据这条7类LSA。生成对应的5类LSA然后继续传播给其他区域。此时，这条5类的LSA里面的Link ID跟7类LSA一样，都是该外部网络地址，而ADV Router则变成了该边界路由器的Router ID，因为这条5类LSA本来就是边界路由器产生的。这里要注意的一点是，该5类LSA里面的Forwarding Address还是保持跟之前的7类LSA的Forwarding Address一样。\n\n# Area Type，区域类型\nOSPF的区域类型分为5种：Backbone area(area 0)、Standard area、Stub area、Totally stubby area、No so stubby area(NSSA)。下面来逐一介绍。\n\n## 1、Backbone area\n也叫骨干区域，其实就是area 0。根据OSPF的设计原则，area 0在OSPF网络中起着中心节点的作用，其他区域的链路信息通过area 0来进行相互传递，这也意味着所有其他区域都必须跟area 0相连。该区域支持1、2、3、4、5类LSA。\n\n## 2、Standard area\n也叫标准区域，标准区域的意思就是在这个区域里面可以正常传递OSPF各类报文。该区域支持1、2、3、4、5类LSA。\n\n## 3、Stub area\n也叫末节区域，所谓末节区域，意思就是该区域不接受非OSPF网络的任何外部路由（external route），它如果要到达那些外部路由的时候，只需要通过默认路由把它发出去就可以了。该区域支持1、2、3类LSA。\n\n## 4、Totally stubby area\n也叫完全末节区域，他的意思是该区域非但不接受外部路由，也不接受自己本区域以外的其他区域的链路信息。它如果要到达本区域以外的目标网络的时候，也是跟末节区域一样，直接把报文通过默认路由发出去。这里要注意的是，由于默认路由是用3类LSA发送的，所以完全末节区域虽然不允许普通的3类LSA报文，但是支持这种包含默认路由的3类LSA。该区域支持1、2类LSA，以及包含默认路由的3类LSA。\n\n## 5、No so stubby area\n就是平时所说的NSSA了，这个NSSA其实是从stub区域发展而来的，它的意思是在含有stub区域的条件下，还拥有可以发送外部路由出去给其他区域的能力。该区域支持1、2、3、7类LSA。这里注意一点的是，NSSA区域还有另外一种模式，那就是是完全末节区域模式的NSSA。这个模式其实就是在完全末节区域环境下允许引入外部路由，这种区域模式支持1、2类LSA以及包含默认路由的3类LSA。\n\n# 配置\n```\narea 24 stub\narea 24 stub no-summary\n```\n","slug":"lsa","published":1,"date":"2018-01-10T07:44:54.550Z","updated":"2018-01-10T07:52:59.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96ogq000464jhncw9ltee","content":"<p>OSPF的区域类型和LSA类型这两个知识点，经常容易导致人们对他们理解上的混乱，今天就来谈谈这两个概念。<br>本文将会以下面这个拓扑图为例进行讲解。</p>\n<h1 id=\"LSA-Type，链路状态通告的类型\"><a href=\"#LSA-Type，链路状态通告的类型\" class=\"headerlink\" title=\"LSA Type，链路状态通告的类型\"></a>LSA Type，链路状态通告的类型</h1><p>本来想先讲区域类型，但是由于要理解不同类型的区域，必然要涉及到不同类型的LSA，现在把LSA放到前面先讲。<br>我们这里谈谈常见的几种LSA：1、2、3、4、5、7类LSA。</p>\n<h2 id=\"1类LSA，路由器LSA。\"><a href=\"#1类LSA，路由器LSA。\" class=\"headerlink\" title=\"1类LSA，路由器LSA。\"></a>1类LSA，路由器LSA。</h2><p>OSPF网络中所有路由器都会产生1类LSA，他的意思就是表示路由器自己在本区域内的直连链路信息。该LSA仅在本区域内传播。其中，Link ID跟ADV Router写的都是该路由器的RouterID。<br>下图为1类LSA：</p>\n<h2 id=\"2类LSA，网络LSA。\"><a href=\"#2类LSA，网络LSA。\" class=\"headerlink\" title=\"2类LSA，网络LSA。\"></a>2类LSA，网络LSA。</h2><p>在广播或者非广播模式下（NBMA）由DR生成。该LSA仅在本区域内传播。2类LSA表达的意思应该是：某区域内，在广播或非广播的网段内选举了DR，于是DR在本区域范围利用2类LSA来进行通告。该LSA仅在本区域内传播。其中，该LSA的Link ID就是该DR的接口IP地址，而ADV Router则是DR的Router ID。</p>\n<h2 id=\"3类LSA，网络汇总LSA。\"><a href=\"#3类LSA，网络汇总LSA。\" class=\"headerlink\" title=\"3类LSA，网络汇总LSA。\"></a>3类LSA，网络汇总LSA。</h2><p>由区域边界路由器ABR生成，用于将一个区域内的网络通告给OSPF中的其他区域。可以认为3类LSA保存着本区域以外的所有其他区域的网络。举个例子，在多区域的环境如1-0-2这样的三个区域，含有area1和area0的ABR会把area1的网络以3类LSA的形式通告给area0，当然它也会把area0里面的网络通告给area1。那么，area1里面的网络又是如何通告到area2呢？这里就要考虑到area1那些一开始被转换成3类LSA的网络，是如何进入到area2的问题了。当原先这个3类LSA进入到area0跟area2的边界路由器时，位于这个边界的ABR就把这条包含着area1链路信息的3类LSA进行修改，修改的内容是把里面的ADV Router替换成自己的Router ID，并且维持原先的Link ID不变，然后把这条修改后的LSA通告给area2，这个就是3类LSA的工作过程。</p>\n<h2 id=\"4类LSA，ASBR汇总LSA。\"><a href=\"#4类LSA，ASBR汇总LSA。\" class=\"headerlink\" title=\"4类LSA，ASBR汇总LSA。\"></a>4类LSA，ASBR汇总LSA。</h2><p>4类LSA跟5类LSA是紧密联系在一起的，可以说4类LSA是由于5类LSA的存在而产生的。4类LSA由距离本路由器最近的ABR生成，这句话应该要这样来理解：如果路由器想要找到包含了外部路由的那台ASBR（自治系统边界路由器）的话，你应该要到达哪台ABR，这台ABR的Router ID就写在该LSA的ADV Router里面，而LSA里面的Link ID代表的是该ASBR的Router ID。</p>\n<h2 id=\"5类LSA，外部的LSA。\"><a href=\"#5类LSA，外部的LSA。\" class=\"headerlink\" title=\"5类LSA，外部的LSA。\"></a>5类LSA，外部的LSA。</h2><p>5类LSA由包含了外部路由的ASBR产生，目标是把某外部路由通告给OSPF进程的所有区域（特殊区域除外，下面会提到）。5类LSA可以穿越所有区域，意思是在跨区域通告时，该LSA的Link ID和ADV Router一直保持不变。通俗一点来说，就像是该ASBR对OSPF全网络的所有路由器说，我有这个外部路由，想去的话就来找我吧！其中，Link ID代表的是那台ASBR所引入的网络，ADV Router则是该ASBR的Router ID。<br>下图为5类LSA：</p>\n<h2 id=\"7类LSA\"><a href=\"#7类LSA\" class=\"headerlink\" title=\"7类LSA\"></a>7类LSA</h2><p>7类LSA是一种由NSSA区域中引入了外部路由的路由器生成的LSA，他仅在NSSA本区域内传播。由于NSSA区域不允许外部的路由进来从而禁止了5类LSA，那么为了能够把自己的外部路由传播出去，于是使用了7类LSA来代替5类LSA的功能。值得注意的一点是，当这种7类LSA到达NSSA跟其他区域的边界后，该边界路由器会根据这条7类LSA。生成对应的5类LSA然后继续传播给其他区域。此时，这条5类的LSA里面的Link ID跟7类LSA一样，都是该外部网络地址，而ADV Router则变成了该边界路由器的Router ID，因为这条5类LSA本来就是边界路由器产生的。这里要注意的一点是，该5类LSA里面的Forwarding Address还是保持跟之前的7类LSA的Forwarding Address一样。</p>\n<h1 id=\"Area-Type，区域类型\"><a href=\"#Area-Type，区域类型\" class=\"headerlink\" title=\"Area Type，区域类型\"></a>Area Type，区域类型</h1><p>OSPF的区域类型分为5种：Backbone area(area 0)、Standard area、Stub area、Totally stubby area、No so stubby area(NSSA)。下面来逐一介绍。</p>\n<h2 id=\"1、Backbone-area\"><a href=\"#1、Backbone-area\" class=\"headerlink\" title=\"1、Backbone area\"></a>1、Backbone area</h2><p>也叫骨干区域，其实就是area 0。根据OSPF的设计原则，area 0在OSPF网络中起着中心节点的作用，其他区域的链路信息通过area 0来进行相互传递，这也意味着所有其他区域都必须跟area 0相连。该区域支持1、2、3、4、5类LSA。</p>\n<h2 id=\"2、Standard-area\"><a href=\"#2、Standard-area\" class=\"headerlink\" title=\"2、Standard area\"></a>2、Standard area</h2><p>也叫标准区域，标准区域的意思就是在这个区域里面可以正常传递OSPF各类报文。该区域支持1、2、3、4、5类LSA。</p>\n<h2 id=\"3、Stub-area\"><a href=\"#3、Stub-area\" class=\"headerlink\" title=\"3、Stub area\"></a>3、Stub area</h2><p>也叫末节区域，所谓末节区域，意思就是该区域不接受非OSPF网络的任何外部路由（external route），它如果要到达那些外部路由的时候，只需要通过默认路由把它发出去就可以了。该区域支持1、2、3类LSA。</p>\n<h2 id=\"4、Totally-stubby-area\"><a href=\"#4、Totally-stubby-area\" class=\"headerlink\" title=\"4、Totally stubby area\"></a>4、Totally stubby area</h2><p>也叫完全末节区域，他的意思是该区域非但不接受外部路由，也不接受自己本区域以外的其他区域的链路信息。它如果要到达本区域以外的目标网络的时候，也是跟末节区域一样，直接把报文通过默认路由发出去。这里要注意的是，由于默认路由是用3类LSA发送的，所以完全末节区域虽然不允许普通的3类LSA报文，但是支持这种包含默认路由的3类LSA。该区域支持1、2类LSA，以及包含默认路由的3类LSA。</p>\n<h2 id=\"5、No-so-stubby-area\"><a href=\"#5、No-so-stubby-area\" class=\"headerlink\" title=\"5、No so stubby area\"></a>5、No so stubby area</h2><p>就是平时所说的NSSA了，这个NSSA其实是从stub区域发展而来的，它的意思是在含有stub区域的条件下，还拥有可以发送外部路由出去给其他区域的能力。该区域支持1、2、3、7类LSA。这里注意一点的是，NSSA区域还有另外一种模式，那就是是完全末节区域模式的NSSA。这个模式其实就是在完全末节区域环境下允许引入外部路由，这种区域模式支持1、2类LSA以及包含默认路由的3类LSA。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">area 24 stub</span><br><span class=\"line\">area 24 stub no-summary</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>OSPF的区域类型和LSA类型这两个知识点，经常容易导致人们对他们理解上的混乱，今天就来谈谈这两个概念。<br>本文将会以下面这个拓扑图为例进行讲解。</p>\n<h1 id=\"LSA-Type，链路状态通告的类型\"><a href=\"#LSA-Type，链路状态通告的类型\" class=\"headerlink\" title=\"LSA Type，链路状态通告的类型\"></a>LSA Type，链路状态通告的类型</h1><p>本来想先讲区域类型，但是由于要理解不同类型的区域，必然要涉及到不同类型的LSA，现在把LSA放到前面先讲。<br>我们这里谈谈常见的几种LSA：1、2、3、4、5、7类LSA。</p>\n<h2 id=\"1类LSA，路由器LSA。\"><a href=\"#1类LSA，路由器LSA。\" class=\"headerlink\" title=\"1类LSA，路由器LSA。\"></a>1类LSA，路由器LSA。</h2><p>OSPF网络中所有路由器都会产生1类LSA，他的意思就是表示路由器自己在本区域内的直连链路信息。该LSA仅在本区域内传播。其中，Link ID跟ADV Router写的都是该路由器的RouterID。<br>下图为1类LSA：</p>\n<h2 id=\"2类LSA，网络LSA。\"><a href=\"#2类LSA，网络LSA。\" class=\"headerlink\" title=\"2类LSA，网络LSA。\"></a>2类LSA，网络LSA。</h2><p>在广播或者非广播模式下（NBMA）由DR生成。该LSA仅在本区域内传播。2类LSA表达的意思应该是：某区域内，在广播或非广播的网段内选举了DR，于是DR在本区域范围利用2类LSA来进行通告。该LSA仅在本区域内传播。其中，该LSA的Link ID就是该DR的接口IP地址，而ADV Router则是DR的Router ID。</p>\n<h2 id=\"3类LSA，网络汇总LSA。\"><a href=\"#3类LSA，网络汇总LSA。\" class=\"headerlink\" title=\"3类LSA，网络汇总LSA。\"></a>3类LSA，网络汇总LSA。</h2><p>由区域边界路由器ABR生成，用于将一个区域内的网络通告给OSPF中的其他区域。可以认为3类LSA保存着本区域以外的所有其他区域的网络。举个例子，在多区域的环境如1-0-2这样的三个区域，含有area1和area0的ABR会把area1的网络以3类LSA的形式通告给area0，当然它也会把area0里面的网络通告给area1。那么，area1里面的网络又是如何通告到area2呢？这里就要考虑到area1那些一开始被转换成3类LSA的网络，是如何进入到area2的问题了。当原先这个3类LSA进入到area0跟area2的边界路由器时，位于这个边界的ABR就把这条包含着area1链路信息的3类LSA进行修改，修改的内容是把里面的ADV Router替换成自己的Router ID，并且维持原先的Link ID不变，然后把这条修改后的LSA通告给area2，这个就是3类LSA的工作过程。</p>\n<h2 id=\"4类LSA，ASBR汇总LSA。\"><a href=\"#4类LSA，ASBR汇总LSA。\" class=\"headerlink\" title=\"4类LSA，ASBR汇总LSA。\"></a>4类LSA，ASBR汇总LSA。</h2><p>4类LSA跟5类LSA是紧密联系在一起的，可以说4类LSA是由于5类LSA的存在而产生的。4类LSA由距离本路由器最近的ABR生成，这句话应该要这样来理解：如果路由器想要找到包含了外部路由的那台ASBR（自治系统边界路由器）的话，你应该要到达哪台ABR，这台ABR的Router ID就写在该LSA的ADV Router里面，而LSA里面的Link ID代表的是该ASBR的Router ID。</p>\n<h2 id=\"5类LSA，外部的LSA。\"><a href=\"#5类LSA，外部的LSA。\" class=\"headerlink\" title=\"5类LSA，外部的LSA。\"></a>5类LSA，外部的LSA。</h2><p>5类LSA由包含了外部路由的ASBR产生，目标是把某外部路由通告给OSPF进程的所有区域（特殊区域除外，下面会提到）。5类LSA可以穿越所有区域，意思是在跨区域通告时，该LSA的Link ID和ADV Router一直保持不变。通俗一点来说，就像是该ASBR对OSPF全网络的所有路由器说，我有这个外部路由，想去的话就来找我吧！其中，Link ID代表的是那台ASBR所引入的网络，ADV Router则是该ASBR的Router ID。<br>下图为5类LSA：</p>\n<h2 id=\"7类LSA\"><a href=\"#7类LSA\" class=\"headerlink\" title=\"7类LSA\"></a>7类LSA</h2><p>7类LSA是一种由NSSA区域中引入了外部路由的路由器生成的LSA，他仅在NSSA本区域内传播。由于NSSA区域不允许外部的路由进来从而禁止了5类LSA，那么为了能够把自己的外部路由传播出去，于是使用了7类LSA来代替5类LSA的功能。值得注意的一点是，当这种7类LSA到达NSSA跟其他区域的边界后，该边界路由器会根据这条7类LSA。生成对应的5类LSA然后继续传播给其他区域。此时，这条5类的LSA里面的Link ID跟7类LSA一样，都是该外部网络地址，而ADV Router则变成了该边界路由器的Router ID，因为这条5类LSA本来就是边界路由器产生的。这里要注意的一点是，该5类LSA里面的Forwarding Address还是保持跟之前的7类LSA的Forwarding Address一样。</p>\n<h1 id=\"Area-Type，区域类型\"><a href=\"#Area-Type，区域类型\" class=\"headerlink\" title=\"Area Type，区域类型\"></a>Area Type，区域类型</h1><p>OSPF的区域类型分为5种：Backbone area(area 0)、Standard area、Stub area、Totally stubby area、No so stubby area(NSSA)。下面来逐一介绍。</p>\n<h2 id=\"1、Backbone-area\"><a href=\"#1、Backbone-area\" class=\"headerlink\" title=\"1、Backbone area\"></a>1、Backbone area</h2><p>也叫骨干区域，其实就是area 0。根据OSPF的设计原则，area 0在OSPF网络中起着中心节点的作用，其他区域的链路信息通过area 0来进行相互传递，这也意味着所有其他区域都必须跟area 0相连。该区域支持1、2、3、4、5类LSA。</p>\n<h2 id=\"2、Standard-area\"><a href=\"#2、Standard-area\" class=\"headerlink\" title=\"2、Standard area\"></a>2、Standard area</h2><p>也叫标准区域，标准区域的意思就是在这个区域里面可以正常传递OSPF各类报文。该区域支持1、2、3、4、5类LSA。</p>\n<h2 id=\"3、Stub-area\"><a href=\"#3、Stub-area\" class=\"headerlink\" title=\"3、Stub area\"></a>3、Stub area</h2><p>也叫末节区域，所谓末节区域，意思就是该区域不接受非OSPF网络的任何外部路由（external route），它如果要到达那些外部路由的时候，只需要通过默认路由把它发出去就可以了。该区域支持1、2、3类LSA。</p>\n<h2 id=\"4、Totally-stubby-area\"><a href=\"#4、Totally-stubby-area\" class=\"headerlink\" title=\"4、Totally stubby area\"></a>4、Totally stubby area</h2><p>也叫完全末节区域，他的意思是该区域非但不接受外部路由，也不接受自己本区域以外的其他区域的链路信息。它如果要到达本区域以外的目标网络的时候，也是跟末节区域一样，直接把报文通过默认路由发出去。这里要注意的是，由于默认路由是用3类LSA发送的，所以完全末节区域虽然不允许普通的3类LSA报文，但是支持这种包含默认路由的3类LSA。该区域支持1、2类LSA，以及包含默认路由的3类LSA。</p>\n<h2 id=\"5、No-so-stubby-area\"><a href=\"#5、No-so-stubby-area\" class=\"headerlink\" title=\"5、No so stubby area\"></a>5、No so stubby area</h2><p>就是平时所说的NSSA了，这个NSSA其实是从stub区域发展而来的，它的意思是在含有stub区域的条件下，还拥有可以发送外部路由出去给其他区域的能力。该区域支持1、2、3、7类LSA。这里注意一点的是，NSSA区域还有另外一种模式，那就是是完全末节区域模式的NSSA。这个模式其实就是在完全末节区域环境下允许引入外部路由，这种区域模式支持1、2类LSA以及包含默认路由的3类LSA。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">area 24 stub</span><br><span class=\"line\">area 24 stub no-summary</span><br></pre></td></tr></table></figure>\n"},{"title":"dpvs源码分析（三）之网络层","_content":"\n# ipv4报文处理\n\n接**{% post_link dpvs源码分析（二）之链路层 %}** 我们知道在处理ipv4报文在下面的函数当中。\n{% codeblock lang:c %}\nstatic int ipv4_rcv(struct rte_mbuf *mbuf, struct netif_port *port)\n{\n    ...\n      \n\t/*这个函数应该是参考了linux协议栈的处理。大概的意思是：\n\t *pskb_may_pull确保skb->data指向的内存包含的数据至少为IP头部大小，由于每个\n\t *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失\n\t *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)->frags[]中。\n\t */\n     //参考http://blog.chinaunix.net/uid-22577711-id-3220103.html\n    if (mbuf_may_pull(mbuf, sizeof(struct ipv4_hdr)) != 0)\n        goto inhdr_error;\n\n    iph = ip4_hdr(mbuf);\n\n    hlen = ip4_hdrlen(mbuf);\n    if (((iph->version_ihl) >> 4) != 4 || hlen < sizeof(struct ipv4_hdr))\n        goto inhdr_error;\n\n    if (mbuf_may_pull(mbuf, hlen) != 0)\n        goto inhdr_error;\n\n    if (unlikely(!(port->flag & NETIF_PORT_FLAG_RX_IP_CSUM_OFFLOAD))) {\n        if (unlikely(rte_raw_cksum(iph, hlen) != 0xFFFF))\n            goto csum_error;\n    }\n\n    len = ntohs(iph->total_length);\n    if (mbuf->pkt_len < len) {\n        IP4_INC_STATS(intruncatedpkts);\n        goto drop;\n    } else if (len < hlen)\n        goto inhdr_error;\n\n    /* trim padding if needed */\n    if (mbuf->pkt_len > len) {\n        if (rte_pktmbuf_trim(mbuf, mbuf->pkt_len - len) != 0) {\n            IP4_INC_STATS(indiscards);\n            goto drop;\n        }\n    }\n    mbuf->userdata = NULL;\n    mbuf->l3_len = hlen;\n\n#ifdef CONFIG_DPVS_IPV4_DEBUG\n    ip4_dump_hdr(iph, mbuf->port);\n#endif\n\n    return INET_HOOK(INET_HOOK_PRE_ROUTING, mbuf, port, NULL, ipv4_rcv_fin);\n\ncsum_error:\n    IP4_INC_STATS(csumerrors);\ninhdr_error:\n    IP4_INC_STATS(inhdrerrors);\ndrop:\n    rte_pktmbuf_free(mbuf);\n    return EDPVS_INVPKT;\n}\n\n\nint INET_HOOK(unsigned int hook, struct rte_mbuf *mbuf,\n        struct netif_port *in, struct netif_port *out,\n        int (*okfn)(struct rte_mbuf *mbuf))\n{\n    ...\n    //执行hook函数\n    ops = list_entry(hook_list, struct inet_hook_ops, list);\n\n    if (!list_empty(hook_list)) {\n        verdict = INET_ACCEPT;\n        list_for_each_entry_continue(ops, hook_list, list) {\nrepeat:\n            verdict = ops->hook(ops->priv, mbuf, &state);\n            if (verdict != INET_ACCEPT) {\n                if (verdict == INET_REPEAT)\n                    goto repeat;\n                break;\n            }\n        }\n    }\n    ...\n    if (verdict == INET_ACCEPT || verdict == INET_STOP) {\n        return okfn(mbuf); \n    } else if (verdict == INET_DROP) {\n        rte_pktmbuf_free(mbuf); //继续协议栈处理\n        return EDPVS_DROP;\n    } else { /* INET_STOLEN */\n        return EDPVS_OK; //交由下一个函数处理，\n    }\n}\n{% endcodeblock %}","source":"_posts/dpvs源码分析（三）之网络层.md","raw":"---\ntitle: dpvs源码分析（三）之网络层\ncategories: 网络转发\ntags:\n  - 网络转发\n  - DPVS\n  - DPDK\n---\n\n# ipv4报文处理\n\n接**{% post_link dpvs源码分析（二）之链路层 %}** 我们知道在处理ipv4报文在下面的函数当中。\n{% codeblock lang:c %}\nstatic int ipv4_rcv(struct rte_mbuf *mbuf, struct netif_port *port)\n{\n    ...\n      \n\t/*这个函数应该是参考了linux协议栈的处理。大概的意思是：\n\t *pskb_may_pull确保skb->data指向的内存包含的数据至少为IP头部大小，由于每个\n\t *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失\n\t *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)->frags[]中。\n\t */\n     //参考http://blog.chinaunix.net/uid-22577711-id-3220103.html\n    if (mbuf_may_pull(mbuf, sizeof(struct ipv4_hdr)) != 0)\n        goto inhdr_error;\n\n    iph = ip4_hdr(mbuf);\n\n    hlen = ip4_hdrlen(mbuf);\n    if (((iph->version_ihl) >> 4) != 4 || hlen < sizeof(struct ipv4_hdr))\n        goto inhdr_error;\n\n    if (mbuf_may_pull(mbuf, hlen) != 0)\n        goto inhdr_error;\n\n    if (unlikely(!(port->flag & NETIF_PORT_FLAG_RX_IP_CSUM_OFFLOAD))) {\n        if (unlikely(rte_raw_cksum(iph, hlen) != 0xFFFF))\n            goto csum_error;\n    }\n\n    len = ntohs(iph->total_length);\n    if (mbuf->pkt_len < len) {\n        IP4_INC_STATS(intruncatedpkts);\n        goto drop;\n    } else if (len < hlen)\n        goto inhdr_error;\n\n    /* trim padding if needed */\n    if (mbuf->pkt_len > len) {\n        if (rte_pktmbuf_trim(mbuf, mbuf->pkt_len - len) != 0) {\n            IP4_INC_STATS(indiscards);\n            goto drop;\n        }\n    }\n    mbuf->userdata = NULL;\n    mbuf->l3_len = hlen;\n\n#ifdef CONFIG_DPVS_IPV4_DEBUG\n    ip4_dump_hdr(iph, mbuf->port);\n#endif\n\n    return INET_HOOK(INET_HOOK_PRE_ROUTING, mbuf, port, NULL, ipv4_rcv_fin);\n\ncsum_error:\n    IP4_INC_STATS(csumerrors);\ninhdr_error:\n    IP4_INC_STATS(inhdrerrors);\ndrop:\n    rte_pktmbuf_free(mbuf);\n    return EDPVS_INVPKT;\n}\n\n\nint INET_HOOK(unsigned int hook, struct rte_mbuf *mbuf,\n        struct netif_port *in, struct netif_port *out,\n        int (*okfn)(struct rte_mbuf *mbuf))\n{\n    ...\n    //执行hook函数\n    ops = list_entry(hook_list, struct inet_hook_ops, list);\n\n    if (!list_empty(hook_list)) {\n        verdict = INET_ACCEPT;\n        list_for_each_entry_continue(ops, hook_list, list) {\nrepeat:\n            verdict = ops->hook(ops->priv, mbuf, &state);\n            if (verdict != INET_ACCEPT) {\n                if (verdict == INET_REPEAT)\n                    goto repeat;\n                break;\n            }\n        }\n    }\n    ...\n    if (verdict == INET_ACCEPT || verdict == INET_STOP) {\n        return okfn(mbuf); \n    } else if (verdict == INET_DROP) {\n        rte_pktmbuf_free(mbuf); //继续协议栈处理\n        return EDPVS_DROP;\n    } else { /* INET_STOLEN */\n        return EDPVS_OK; //交由下一个函数处理，\n    }\n}\n{% endcodeblock %}","slug":"dpvs源码分析（三）之网络层","published":1,"date":"2018-01-29T06:59:47.719Z","updated":"2018-01-31T08:23:04.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96ogu000964jh1x1f3bp0","content":"<h1 id=\"ipv4报文处理\"><a href=\"#ipv4报文处理\" class=\"headerlink\" title=\"ipv4报文处理\"></a>ipv4报文处理</h1><p>接<strong><a href=\"/2018/01/29/dpvs源码分析（二）之链路层/\" title=\"dpvs源码分析（二）之链路层\">dpvs源码分析（二）之链路层</a></strong> 我们知道在处理ipv4报文在下面的函数当中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ipv4_rcv</span><span class=\"params\">(struct rte_mbuf *mbuf, struct netif_port *port)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">      </span><br><span class=\"line\">\t<span class=\"comment\">/*这个函数应该是参考了linux协议栈的处理。大概的意思是：</span></span><br><span class=\"line\"><span class=\"comment\">\t *pskb_may_pull确保skb-&gt;data指向的内存包含的数据至少为IP头部大小，由于每个</span></span><br><span class=\"line\"><span class=\"comment\">\t *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失</span></span><br><span class=\"line\"><span class=\"comment\">\t *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)-&gt;frags[]中。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">     <span class=\"comment\">//参考http://blog.chinaunix.net/uid-22577711-id-3220103.html</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf_may_pull(mbuf, <span class=\"keyword\">sizeof</span>(struct ipv4_hdr)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    iph = ip4_hdr(mbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    hlen = ip4_hdrlen(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((iph-&gt;version_ihl) &gt;&gt; <span class=\"number\">4</span>) != <span class=\"number\">4</span> || hlen &lt; <span class=\"keyword\">sizeof</span>(struct ipv4_hdr))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf_may_pull(mbuf, hlen) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(!(port-&gt;flag &amp; NETIF_PORT_FLAG_RX_IP_CSUM_OFFLOAD))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unlikely(rte_raw_cksum(iph, hlen) != <span class=\"number\">0xFFFF</span>))</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> csum_error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = ntohs(iph-&gt;total_length);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf-&gt;pkt_len &lt; len) &#123;</span><br><span class=\"line\">        IP4_INC_STATS(intruncatedpkts);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len &lt; hlen)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* trim padding if needed */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf-&gt;pkt_len &gt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rte_pktmbuf_trim(mbuf, mbuf-&gt;pkt_len - len) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            IP4_INC_STATS(indiscards);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mbuf-&gt;userdata = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    mbuf-&gt;l3_len = hlen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_DPVS_IPV4_DEBUG</span></span><br><span class=\"line\">    ip4_dump_hdr(iph, mbuf-&gt;port);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> INET_HOOK(INET_HOOK_PRE_ROUTING, mbuf, port, <span class=\"literal\">NULL</span>, ipv4_rcv_fin);</span><br><span class=\"line\"></span><br><span class=\"line\">csum_error:</span><br><span class=\"line\">    IP4_INC_STATS(csumerrors);</span><br><span class=\"line\">inhdr_error:</span><br><span class=\"line\">    IP4_INC_STATS(inhdrerrors);</span><br><span class=\"line\">drop:</span><br><span class=\"line\">    rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_INVPKT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">INET_HOOK</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook, struct rte_mbuf *mbuf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        struct netif_port *in, struct netif_port *out,</span></span></span><br><span class=\"line\">        int (*okfn)(struct rte_mbuf *mbuf))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//执行hook函数</span></span><br><span class=\"line\">    ops = list_entry(hook_list, struct inet_hook_ops, <span class=\"built_in\">list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!list_empty(hook_list)) &#123;</span><br><span class=\"line\">        verdict = INET_ACCEPT;</span><br><span class=\"line\">        list_for_each_entry_continue(ops, hook_list, <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">repeat:</span><br><span class=\"line\">            verdict = ops-&gt;hook(ops-&gt;priv, mbuf, &amp;state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (verdict != INET_ACCEPT) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (verdict == INET_REPEAT)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> repeat;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verdict == INET_ACCEPT || verdict == INET_STOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> okfn(mbuf); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verdict == INET_DROP) &#123;</span><br><span class=\"line\">        rte_pktmbuf_free(mbuf); <span class=\"comment\">//继续协议栈处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_DROP;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* INET_STOLEN */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_OK; <span class=\"comment\">//交由下一个函数处理，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ipv4报文处理\"><a href=\"#ipv4报文处理\" class=\"headerlink\" title=\"ipv4报文处理\"></a>ipv4报文处理</h1><p>接<strong><a href=\"/2018/01/29/dpvs源码分析（二）之链路层/\" title=\"dpvs源码分析（二）之链路层\">dpvs源码分析（二）之链路层</a></strong> 我们知道在处理ipv4报文在下面的函数当中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ipv4_rcv</span><span class=\"params\">(struct rte_mbuf *mbuf, struct netif_port *port)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">      </span><br><span class=\"line\">\t<span class=\"comment\">/*这个函数应该是参考了linux协议栈的处理。大概的意思是：</span></span><br><span class=\"line\"><span class=\"comment\">\t *pskb_may_pull确保skb-&gt;data指向的内存包含的数据至少为IP头部大小，由于每个</span></span><br><span class=\"line\"><span class=\"comment\">\t *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失</span></span><br><span class=\"line\"><span class=\"comment\">\t *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)-&gt;frags[]中。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">     <span class=\"comment\">//参考http://blog.chinaunix.net/uid-22577711-id-3220103.html</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf_may_pull(mbuf, <span class=\"keyword\">sizeof</span>(struct ipv4_hdr)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    iph = ip4_hdr(mbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    hlen = ip4_hdrlen(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((iph-&gt;version_ihl) &gt;&gt; <span class=\"number\">4</span>) != <span class=\"number\">4</span> || hlen &lt; <span class=\"keyword\">sizeof</span>(struct ipv4_hdr))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf_may_pull(mbuf, hlen) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unlikely(!(port-&gt;flag &amp; NETIF_PORT_FLAG_RX_IP_CSUM_OFFLOAD))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unlikely(rte_raw_cksum(iph, hlen) != <span class=\"number\">0xFFFF</span>))</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> csum_error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len = ntohs(iph-&gt;total_length);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf-&gt;pkt_len &lt; len) &#123;</span><br><span class=\"line\">        IP4_INC_STATS(intruncatedpkts);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len &lt; hlen)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> inhdr_error;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* trim padding if needed */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbuf-&gt;pkt_len &gt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rte_pktmbuf_trim(mbuf, mbuf-&gt;pkt_len - len) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            IP4_INC_STATS(indiscards);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mbuf-&gt;userdata = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    mbuf-&gt;l3_len = hlen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_DPVS_IPV4_DEBUG</span></span><br><span class=\"line\">    ip4_dump_hdr(iph, mbuf-&gt;port);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> INET_HOOK(INET_HOOK_PRE_ROUTING, mbuf, port, <span class=\"literal\">NULL</span>, ipv4_rcv_fin);</span><br><span class=\"line\"></span><br><span class=\"line\">csum_error:</span><br><span class=\"line\">    IP4_INC_STATS(csumerrors);</span><br><span class=\"line\">inhdr_error:</span><br><span class=\"line\">    IP4_INC_STATS(inhdrerrors);</span><br><span class=\"line\">drop:</span><br><span class=\"line\">    rte_pktmbuf_free(mbuf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDPVS_INVPKT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">INET_HOOK</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook, struct rte_mbuf *mbuf,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        struct netif_port *in, struct netif_port *out,</span></span></span><br><span class=\"line\">        int (*okfn)(struct rte_mbuf *mbuf))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//执行hook函数</span></span><br><span class=\"line\">    ops = list_entry(hook_list, struct inet_hook_ops, <span class=\"built_in\">list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!list_empty(hook_list)) &#123;</span><br><span class=\"line\">        verdict = INET_ACCEPT;</span><br><span class=\"line\">        list_for_each_entry_continue(ops, hook_list, <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">repeat:</span><br><span class=\"line\">            verdict = ops-&gt;hook(ops-&gt;priv, mbuf, &amp;state);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (verdict != INET_ACCEPT) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (verdict == INET_REPEAT)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> repeat;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verdict == INET_ACCEPT || verdict == INET_STOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> okfn(mbuf); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verdict == INET_DROP) &#123;</span><br><span class=\"line\">        rte_pktmbuf_free(mbuf); <span class=\"comment\">//继续协议栈处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_DROP;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* INET_STOLEN */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EDPVS_OK; <span class=\"comment\">//交由下一个函数处理，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于DPDK的多核令牌桶算法","_content":"\nQoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路目前有哪些限速算法，而主要套路基于DPDK的软件架构，如何实现多核限速算法，并获取到较高的性能。\n\n# 令牌桶算法介绍\n## 简介\n\n所谓的令牌桶算法，顾名思义，就是向一个桶中按照一定的速率放入令牌，如下图所示。当有需要限速的数据包通过的时候，依据数据报文的长度算出需要取走的令牌数N。如果桶中的令牌数量大于N，那么此数据包就顺利通过了限速测试。反之，此数据包就没有通过限速测试，于是就将报文进行丢弃处理（大多数情况下是如此，也可以进行其他处理，依赖用户程序的设计）。整个令牌桶算法的主要原理就是这样，是不是感觉很简单，详细分析将在下文介绍。\n{% img /images/lingpaitong.PNG 800 700 %}\n\n## 基于DPDK的实现\n首先介绍下DPDK的两个函数，这也是在算法的实现中需要用到的两个函数，摘抄自DPDK官方文档：\n```\nstatic uint64_t rte_get_timer_cycles(void )\nGet the number of cycles since boot from the default timer.\n\nstatic uint64_t rte_get_timer_hz(void)\nGet the number of cycles in one second for the default timer.\t\n\n```\n\n### 放入令牌\n在本设计中，以N = rte_get_timer_hz() 的速率向桶里面放令牌。也就是说，每秒放入一秒的时钟周期个数的令牌。的限速rate = 10000Bps，需要限速的包的大小为1500B。那么在处理该数据包，应该消耗多少令牌呢？利用小学数学应该可以算出，需要消耗\n```\n如果一秒内有一个包：\nN * (1500 / 10000) < N 此时可以通过\n如果一秒内有7个包\nN * (1500*7 / 10000) > N 那么第七个包将会被丢弃\n\n```\n### 放入方式\n假设每秒应该放入N = rte_get_timer_hz() 个令牌\n* 方式1： 设置定时器，在定时器的回调函数中放入令牌。\n\t* 解析： 可以利用dpdk的定时器，比如设置每1秒，call以下回调函数，放入令牌1 * N个令牌。\n\t* 缺陷1： 这种方式的问题在于，如果在这一秒钟内，如果前0.5秒的突发流量将令牌都消耗完了，那么后0.5秒的报文不就全部丢掉了。有人说，可以将这个间隔设置小一点啊，比入每1/1000秒放入N/1000个令牌。但是问题在于，这个间隔到底是多少好呢？\n\t* 缺陷2： 无法处理突发流量，原因见方式3。\n\n\n* 方式2： 按时间间隔放入\n\t* 解析： 按时间间隔放入，假设当前报文和上一个报文的时间间隔为1ms秒，那么放入1/1000 * N 个令牌。这种方式的好处在于针对于每个数据包的处理前都会放入令牌，分散了令牌的放入。\n\t* 缺陷： 无法处理突发流量，原因见方式3。\n\t{% img /images/lingpaitong1.JPG %}\n\n* 方式3： 改进方式2\n\t* 背景： 方式1和方式2都面临一个问题，如果有突发流量，那么可能在极短的时间内消耗全部的令牌，大量的流量被放行，从而对系统造成威胁。\n\t* 解析： 如果当出现丢包，那么在接下来的200us内的前64个报文都会被丢弃。对于200us和64这个值都是经验值，可以在真实场景中进行调优。\n\t* 缺陷： 这个方式降低了突发流量对系统的威胁，但是会对限速的准确性有一定的影响，通过测试可以证明。\n\t{% img /images/lingpaitong2.JPG %}\n\n{% blockquote %}\n** 方式2和方式3可以协作运行，比如用方式3先进行防攻击限速，然后再用方式2进行精确限速。**\n{% endblockquote %}\n\n### 多线程处理\n** 多线程处理的基本思想，如下图所示：**\n* 一个全局令牌桶\n\t随着时间的推移，每次放入令牌仅仅放入全局令牌桶。为什么不放入线程令牌桶？假设需要限速的报文到了不同的线程，并且每个线程流量不同，那么对于每个线程放入令牌的数量就不得而知了。\n* 每个线程拥有独立的子令牌桶\n\t子令牌桶只消费令牌，不放入令牌。当子令牌桶的令牌不够时，从全局令牌桶索取令牌。\n\n{% img /images/lptfp.PNG %}\n\n** 详细流程 **\n下面将用流程图的形式来描述多线程令牌桶的实现。在最后会介绍这种令牌桶算法可能存在的问题。\n{% img /images/lingpaitong3.jpg %}\n\n### 测试结果\n设置限速11Mbps，测试结果为：\n{% img /images/lingpaitong_rs.jpg %}\n","source":"_posts/令牌桶算法算法.md","raw":"---\ntitle: 基于DPDK的多核令牌桶算法\ncategories: 网络转发\ntags:\n  - 网络转发\n  - 令牌桶算法\n  - 多核限速\n  - DPDK\n---\n\nQoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路目前有哪些限速算法，而主要套路基于DPDK的软件架构，如何实现多核限速算法，并获取到较高的性能。\n\n# 令牌桶算法介绍\n## 简介\n\n所谓的令牌桶算法，顾名思义，就是向一个桶中按照一定的速率放入令牌，如下图所示。当有需要限速的数据包通过的时候，依据数据报文的长度算出需要取走的令牌数N。如果桶中的令牌数量大于N，那么此数据包就顺利通过了限速测试。反之，此数据包就没有通过限速测试，于是就将报文进行丢弃处理（大多数情况下是如此，也可以进行其他处理，依赖用户程序的设计）。整个令牌桶算法的主要原理就是这样，是不是感觉很简单，详细分析将在下文介绍。\n{% img /images/lingpaitong.PNG 800 700 %}\n\n## 基于DPDK的实现\n首先介绍下DPDK的两个函数，这也是在算法的实现中需要用到的两个函数，摘抄自DPDK官方文档：\n```\nstatic uint64_t rte_get_timer_cycles(void )\nGet the number of cycles since boot from the default timer.\n\nstatic uint64_t rte_get_timer_hz(void)\nGet the number of cycles in one second for the default timer.\t\n\n```\n\n### 放入令牌\n在本设计中，以N = rte_get_timer_hz() 的速率向桶里面放令牌。也就是说，每秒放入一秒的时钟周期个数的令牌。的限速rate = 10000Bps，需要限速的包的大小为1500B。那么在处理该数据包，应该消耗多少令牌呢？利用小学数学应该可以算出，需要消耗\n```\n如果一秒内有一个包：\nN * (1500 / 10000) < N 此时可以通过\n如果一秒内有7个包\nN * (1500*7 / 10000) > N 那么第七个包将会被丢弃\n\n```\n### 放入方式\n假设每秒应该放入N = rte_get_timer_hz() 个令牌\n* 方式1： 设置定时器，在定时器的回调函数中放入令牌。\n\t* 解析： 可以利用dpdk的定时器，比如设置每1秒，call以下回调函数，放入令牌1 * N个令牌。\n\t* 缺陷1： 这种方式的问题在于，如果在这一秒钟内，如果前0.5秒的突发流量将令牌都消耗完了，那么后0.5秒的报文不就全部丢掉了。有人说，可以将这个间隔设置小一点啊，比入每1/1000秒放入N/1000个令牌。但是问题在于，这个间隔到底是多少好呢？\n\t* 缺陷2： 无法处理突发流量，原因见方式3。\n\n\n* 方式2： 按时间间隔放入\n\t* 解析： 按时间间隔放入，假设当前报文和上一个报文的时间间隔为1ms秒，那么放入1/1000 * N 个令牌。这种方式的好处在于针对于每个数据包的处理前都会放入令牌，分散了令牌的放入。\n\t* 缺陷： 无法处理突发流量，原因见方式3。\n\t{% img /images/lingpaitong1.JPG %}\n\n* 方式3： 改进方式2\n\t* 背景： 方式1和方式2都面临一个问题，如果有突发流量，那么可能在极短的时间内消耗全部的令牌，大量的流量被放行，从而对系统造成威胁。\n\t* 解析： 如果当出现丢包，那么在接下来的200us内的前64个报文都会被丢弃。对于200us和64这个值都是经验值，可以在真实场景中进行调优。\n\t* 缺陷： 这个方式降低了突发流量对系统的威胁，但是会对限速的准确性有一定的影响，通过测试可以证明。\n\t{% img /images/lingpaitong2.JPG %}\n\n{% blockquote %}\n** 方式2和方式3可以协作运行，比如用方式3先进行防攻击限速，然后再用方式2进行精确限速。**\n{% endblockquote %}\n\n### 多线程处理\n** 多线程处理的基本思想，如下图所示：**\n* 一个全局令牌桶\n\t随着时间的推移，每次放入令牌仅仅放入全局令牌桶。为什么不放入线程令牌桶？假设需要限速的报文到了不同的线程，并且每个线程流量不同，那么对于每个线程放入令牌的数量就不得而知了。\n* 每个线程拥有独立的子令牌桶\n\t子令牌桶只消费令牌，不放入令牌。当子令牌桶的令牌不够时，从全局令牌桶索取令牌。\n\n{% img /images/lptfp.PNG %}\n\n** 详细流程 **\n下面将用流程图的形式来描述多线程令牌桶的实现。在最后会介绍这种令牌桶算法可能存在的问题。\n{% img /images/lingpaitong3.jpg %}\n\n### 测试结果\n设置限速11Mbps，测试结果为：\n{% img /images/lingpaitong_rs.jpg %}\n","slug":"令牌桶算法算法","published":1,"date":"2018-01-11T08:35:16.823Z","updated":"2018-02-11T09:53:18.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96ogz000e64jhay829bef","content":"<p>QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路目前有哪些限速算法，而主要套路基于DPDK的软件架构，如何实现多核限速算法，并获取到较高的性能。</p>\n<h1 id=\"令牌桶算法介绍\"><a href=\"#令牌桶算法介绍\" class=\"headerlink\" title=\"令牌桶算法介绍\"></a>令牌桶算法介绍</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>所谓的令牌桶算法，顾名思义，就是向一个桶中按照一定的速率放入令牌，如下图所示。当有需要限速的数据包通过的时候，依据数据报文的长度算出需要取走的令牌数N。如果桶中的令牌数量大于N，那么此数据包就顺利通过了限速测试。反之，此数据包就没有通过限速测试，于是就将报文进行丢弃处理（大多数情况下是如此，也可以进行其他处理，依赖用户程序的设计）。整个令牌桶算法的主要原理就是这样，是不是感觉很简单，详细分析将在下文介绍。<br><img src=\"/images/lingpaitong.PNG\" width=\"800\" height=\"700\"></p>\n<h2 id=\"基于DPDK的实现\"><a href=\"#基于DPDK的实现\" class=\"headerlink\" title=\"基于DPDK的实现\"></a>基于DPDK的实现</h2><p>首先介绍下DPDK的两个函数，这也是在算法的实现中需要用到的两个函数，摘抄自DPDK官方文档：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static uint64_t rte_get_timer_cycles(void )</span><br><span class=\"line\">Get the number of cycles since boot from the default timer.</span><br><span class=\"line\"></span><br><span class=\"line\">static uint64_t rte_get_timer_hz(void)</span><br><span class=\"line\">Get the number of cycles in one second for the default timer.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"放入令牌\"><a href=\"#放入令牌\" class=\"headerlink\" title=\"放入令牌\"></a>放入令牌</h3><p>在本设计中，以N = rte_get_timer_hz() 的速率向桶里面放令牌。也就是说，每秒放入一秒的时钟周期个数的令牌。的限速rate = 10000Bps，需要限速的包的大小为1500B。那么在处理该数据包，应该消耗多少令牌呢？利用小学数学应该可以算出，需要消耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一秒内有一个包：</span><br><span class=\"line\">N * (1500 / 10000) &lt; N 此时可以通过</span><br><span class=\"line\">如果一秒内有7个包</span><br><span class=\"line\">N * (1500*7 / 10000) &gt; N 那么第七个包将会被丢弃</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"放入方式\"><a href=\"#放入方式\" class=\"headerlink\" title=\"放入方式\"></a>放入方式</h3><p>假设每秒应该放入N = rte_get_timer_hz() 个令牌</p>\n<ul>\n<li>方式1： 设置定时器，在定时器的回调函数中放入令牌。<ul>\n<li>解析： 可以利用dpdk的定时器，比如设置每1秒，call以下回调函数，放入令牌1 * N个令牌。</li>\n<li>缺陷1： 这种方式的问题在于，如果在这一秒钟内，如果前0.5秒的突发流量将令牌都消耗完了，那么后0.5秒的报文不就全部丢掉了。有人说，可以将这个间隔设置小一点啊，比入每1/1000秒放入N/1000个令牌。但是问题在于，这个间隔到底是多少好呢？</li>\n<li>缺陷2： 无法处理突发流量，原因见方式3。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>方式2： 按时间间隔放入</p>\n<ul>\n<li>解析： 按时间间隔放入，假设当前报文和上一个报文的时间间隔为1ms秒，那么放入1/1000 * N 个令牌。这种方式的好处在于针对于每个数据包的处理前都会放入令牌，分散了令牌的放入。</li>\n<li>缺陷： 无法处理突发流量，原因见方式3。<img src=\"/images/lingpaitong1.JPG\">\n</li>\n</ul>\n</li>\n<li><p>方式3： 改进方式2</p>\n<ul>\n<li>背景： 方式1和方式2都面临一个问题，如果有突发流量，那么可能在极短的时间内消耗全部的令牌，大量的流量被放行，从而对系统造成威胁。</li>\n<li>解析： 如果当出现丢包，那么在接下来的200us内的前64个报文都会被丢弃。对于200us和64这个值都是经验值，可以在真实场景中进行调优。</li>\n<li>缺陷： 这个方式降低了突发流量对系统的威胁，但是会对限速的准确性有一定的影响，通过测试可以证明。<img src=\"/images/lingpaitong2.JPG\">\n</li>\n</ul>\n</li>\n</ul>\n<blockquote><p><strong> 方式2和方式3可以协作运行，比如用方式3先进行防攻击限速，然后再用方式2进行精确限速。</strong></p>\n</blockquote>\n<h3 id=\"多线程处理\"><a href=\"#多线程处理\" class=\"headerlink\" title=\"多线程处理\"></a>多线程处理</h3><p><strong> 多线程处理的基本思想，如下图所示：</strong></p>\n<ul>\n<li>一个全局令牌桶<br>  随着时间的推移，每次放入令牌仅仅放入全局令牌桶。为什么不放入线程令牌桶？假设需要限速的报文到了不同的线程，并且每个线程流量不同，那么对于每个线程放入令牌的数量就不得而知了。</li>\n<li>每个线程拥有独立的子令牌桶<br>  子令牌桶只消费令牌，不放入令牌。当子令牌桶的令牌不够时，从全局令牌桶索取令牌。</li>\n</ul>\n<img src=\"/images/lptfp.PNG\">\n<p><strong> 详细流程 </strong><br>下面将用流程图的形式来描述多线程令牌桶的实现。在最后会介绍这种令牌桶算法可能存在的问题。<br><img src=\"/images/lingpaitong3.jpg\"></p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p>设置限速11Mbps，测试结果为：<br><img src=\"/images/lingpaitong_rs.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力, 是网络的一种安全机制， 是用来解决网络延迟和阻塞等问题的一种技术。其中限速就是一种QOS机制，目前限速算法中用得比较多的是令牌桶算法。本文不打算套路目前有哪些限速算法，而主要套路基于DPDK的软件架构，如何实现多核限速算法，并获取到较高的性能。</p>\n<h1 id=\"令牌桶算法介绍\"><a href=\"#令牌桶算法介绍\" class=\"headerlink\" title=\"令牌桶算法介绍\"></a>令牌桶算法介绍</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>所谓的令牌桶算法，顾名思义，就是向一个桶中按照一定的速率放入令牌，如下图所示。当有需要限速的数据包通过的时候，依据数据报文的长度算出需要取走的令牌数N。如果桶中的令牌数量大于N，那么此数据包就顺利通过了限速测试。反之，此数据包就没有通过限速测试，于是就将报文进行丢弃处理（大多数情况下是如此，也可以进行其他处理，依赖用户程序的设计）。整个令牌桶算法的主要原理就是这样，是不是感觉很简单，详细分析将在下文介绍。<br><img src=\"/images/lingpaitong.PNG\" width=\"800\" height=\"700\"></p>\n<h2 id=\"基于DPDK的实现\"><a href=\"#基于DPDK的实现\" class=\"headerlink\" title=\"基于DPDK的实现\"></a>基于DPDK的实现</h2><p>首先介绍下DPDK的两个函数，这也是在算法的实现中需要用到的两个函数，摘抄自DPDK官方文档：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static uint64_t rte_get_timer_cycles(void )</span><br><span class=\"line\">Get the number of cycles since boot from the default timer.</span><br><span class=\"line\"></span><br><span class=\"line\">static uint64_t rte_get_timer_hz(void)</span><br><span class=\"line\">Get the number of cycles in one second for the default timer.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"放入令牌\"><a href=\"#放入令牌\" class=\"headerlink\" title=\"放入令牌\"></a>放入令牌</h3><p>在本设计中，以N = rte_get_timer_hz() 的速率向桶里面放令牌。也就是说，每秒放入一秒的时钟周期个数的令牌。的限速rate = 10000Bps，需要限速的包的大小为1500B。那么在处理该数据包，应该消耗多少令牌呢？利用小学数学应该可以算出，需要消耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一秒内有一个包：</span><br><span class=\"line\">N * (1500 / 10000) &lt; N 此时可以通过</span><br><span class=\"line\">如果一秒内有7个包</span><br><span class=\"line\">N * (1500*7 / 10000) &gt; N 那么第七个包将会被丢弃</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"放入方式\"><a href=\"#放入方式\" class=\"headerlink\" title=\"放入方式\"></a>放入方式</h3><p>假设每秒应该放入N = rte_get_timer_hz() 个令牌</p>\n<ul>\n<li>方式1： 设置定时器，在定时器的回调函数中放入令牌。<ul>\n<li>解析： 可以利用dpdk的定时器，比如设置每1秒，call以下回调函数，放入令牌1 * N个令牌。</li>\n<li>缺陷1： 这种方式的问题在于，如果在这一秒钟内，如果前0.5秒的突发流量将令牌都消耗完了，那么后0.5秒的报文不就全部丢掉了。有人说，可以将这个间隔设置小一点啊，比入每1/1000秒放入N/1000个令牌。但是问题在于，这个间隔到底是多少好呢？</li>\n<li>缺陷2： 无法处理突发流量，原因见方式3。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>方式2： 按时间间隔放入</p>\n<ul>\n<li>解析： 按时间间隔放入，假设当前报文和上一个报文的时间间隔为1ms秒，那么放入1/1000 * N 个令牌。这种方式的好处在于针对于每个数据包的处理前都会放入令牌，分散了令牌的放入。</li>\n<li>缺陷： 无法处理突发流量，原因见方式3。<img src=\"/images/lingpaitong1.JPG\">\n</li>\n</ul>\n</li>\n<li><p>方式3： 改进方式2</p>\n<ul>\n<li>背景： 方式1和方式2都面临一个问题，如果有突发流量，那么可能在极短的时间内消耗全部的令牌，大量的流量被放行，从而对系统造成威胁。</li>\n<li>解析： 如果当出现丢包，那么在接下来的200us内的前64个报文都会被丢弃。对于200us和64这个值都是经验值，可以在真实场景中进行调优。</li>\n<li>缺陷： 这个方式降低了突发流量对系统的威胁，但是会对限速的准确性有一定的影响，通过测试可以证明。<img src=\"/images/lingpaitong2.JPG\">\n</li>\n</ul>\n</li>\n</ul>\n<blockquote><p><strong> 方式2和方式3可以协作运行，比如用方式3先进行防攻击限速，然后再用方式2进行精确限速。</strong></p>\n</blockquote>\n<h3 id=\"多线程处理\"><a href=\"#多线程处理\" class=\"headerlink\" title=\"多线程处理\"></a>多线程处理</h3><p><strong> 多线程处理的基本思想，如下图所示：</strong></p>\n<ul>\n<li>一个全局令牌桶<br>  随着时间的推移，每次放入令牌仅仅放入全局令牌桶。为什么不放入线程令牌桶？假设需要限速的报文到了不同的线程，并且每个线程流量不同，那么对于每个线程放入令牌的数量就不得而知了。</li>\n<li>每个线程拥有独立的子令牌桶<br>  子令牌桶只消费令牌，不放入令牌。当子令牌桶的令牌不够时，从全局令牌桶索取令牌。</li>\n</ul>\n<img src=\"/images/lptfp.PNG\">\n<p><strong> 详细流程 </strong><br>下面将用流程图的形式来描述多线程令牌桶的实现。在最后会介绍这种令牌桶算法可能存在的问题。<br><img src=\"/images/lingpaitong3.jpg\"></p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p>设置限速11Mbps，测试结果为：<br><img src=\"/images/lingpaitong_rs.jpg\"></p>\n"},{"title":"c语言构造函数","_content":"说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exit来修饰。这个两个个宏定义为：\n{% codeblock lang:c %}\n#define fio_init __attribute__((constructor))  \n#define fio_exit __attribute__((destructor))\n{% endcodeblock %}\n\n以如下构造函数为例,这是vpp中的代码：\n\n{% codeblock lang:c %}\n#define VLIB_DECLARE_INIT_FUNCTION(x, tag)                      \\\nvlib_init_function_t * _VLIB_INIT_FUNCTION_SYMBOL (x, tag) = x; \\\nstatic void __vlib_add_##tag##_function_##x (void)              \\\n    __attribute__((__constructor__)) ;                          \\\nstatic void __vlib_add_##tag##_function_##x (void)              \\\n{                                                               \\\n vlib_main_t * vm = vlib_get_main();                            \\\n static _vlib_init_function_list_elt_t _vlib_init_function;     \\\n _vlib_init_function.next_init_function                         \\\n    = vm->tag##_function_registrations;                         \\\n  vm->tag##_function_registrations = &_vlib_init_function;      \\\n _vlib_init_function.f = &x;                                    \\\n}\n{% endcodeblock %}\n这个两个属性是gcc提供的属性，在dpdk中也有体现。若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。通过如下测试代码，能更加清晰地认识到这两个属性的作用：\n{% codeblock lang:c %}\n#include <stdio.h>  \n#include <stdlib.h>  \nvoid __attribute__((constructor)) con_func()  \n{  \n    printf(\"befor main: constructor is called..\\n\");  \n}  \nvoid __attribute__((destructor)) des_func()  \n{  \n    printf(\"after main: destructor is called..\\n\");  \n}  \nint main()  \n{  \n    printf(\"main func..\\n\");  \n    return 0;  \n}\n{% endcodeblock %}\n结果：\n```\nbefor main: constructor is called..  \nmain func..  \nafter main: destructor is called..\n```\n","source":"_posts/c语言构造函数.md","raw":"---\ntitle: c语言构造函数\ncategories: c语言\ntags:\n  - c语言\n---\n说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exit来修饰。这个两个个宏定义为：\n{% codeblock lang:c %}\n#define fio_init __attribute__((constructor))  \n#define fio_exit __attribute__((destructor))\n{% endcodeblock %}\n\n以如下构造函数为例,这是vpp中的代码：\n\n{% codeblock lang:c %}\n#define VLIB_DECLARE_INIT_FUNCTION(x, tag)                      \\\nvlib_init_function_t * _VLIB_INIT_FUNCTION_SYMBOL (x, tag) = x; \\\nstatic void __vlib_add_##tag##_function_##x (void)              \\\n    __attribute__((__constructor__)) ;                          \\\nstatic void __vlib_add_##tag##_function_##x (void)              \\\n{                                                               \\\n vlib_main_t * vm = vlib_get_main();                            \\\n static _vlib_init_function_list_elt_t _vlib_init_function;     \\\n _vlib_init_function.next_init_function                         \\\n    = vm->tag##_function_registrations;                         \\\n  vm->tag##_function_registrations = &_vlib_init_function;      \\\n _vlib_init_function.f = &x;                                    \\\n}\n{% endcodeblock %}\n这个两个属性是gcc提供的属性，在dpdk中也有体现。若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。通过如下测试代码，能更加清晰地认识到这两个属性的作用：\n{% codeblock lang:c %}\n#include <stdio.h>  \n#include <stdlib.h>  \nvoid __attribute__((constructor)) con_func()  \n{  \n    printf(\"befor main: constructor is called..\\n\");  \n}  \nvoid __attribute__((destructor)) des_func()  \n{  \n    printf(\"after main: destructor is called..\\n\");  \n}  \nint main()  \n{  \n    printf(\"main func..\\n\");  \n    return 0;  \n}\n{% endcodeblock %}\n结果：\n```\nbefor main: constructor is called..  \nmain func..  \nafter main: destructor is called..\n```\n","slug":"c语言构造函数","published":1,"date":"2018-01-10T07:46:13.856Z","updated":"2018-01-10T08:22:16.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjei96oh2000g64jh9w18ze82","content":"<p>说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exit来修饰。这个两个个宏定义为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fio_init __attribute__((constructor))  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fio_exit __attribute__((destructor))</span></span><br></pre></td></tr></table></figure></p>\n<p>以如下构造函数为例,这是vpp中的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VLIB_DECLARE_INIT_FUNCTION(x, tag)                      \\</span></span><br><span class=\"line\"><span class=\"keyword\">vlib_init_function_t</span> * _VLIB_INIT_FUNCTION_SYMBOL (x, tag) = x; \\</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __vlib_add_#<span class=\"meta\">#tag##_function_##x (void)              \\</span></span><br><span class=\"line\">    __attribute__((__constructor__)) ;                          \\</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __vlib_add_#<span class=\"meta\">#tag##_function_##x (void)              \\</span></span><br><span class=\"line\">&#123;                                                               \\</span><br><span class=\"line\"> <span class=\"keyword\">vlib_main_t</span> * vm = vlib_get_main();                            \\</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">_vlib_init_function_list_elt_t</span> _vlib_init_function;     \\</span><br><span class=\"line\"> _vlib_init_function.next_init_function                         \\</span><br><span class=\"line\">    = vm-&gt;tag##_function_registrations;                         \\</span><br><span class=\"line\">  vm-&gt;tag##_function_registrations = &amp;_vlib_init_function;      \\</span><br><span class=\"line\"> _vlib_init_function.f = &amp;x;                                    \\</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个两个属性是gcc提供的属性，在dpdk中也有体现。若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。通过如下测试代码，能更加清晰地认识到这两个属性的作用：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> __attribute__((constructor)) con_func()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"befor main: constructor is called..\\n\"</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">void</span> __attribute__((destructor)) des_func()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"after main: destructor is called..\\n\"</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"main func..\\n\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">befor main: constructor is called..  </span><br><span class=\"line\">main func..  </span><br><span class=\"line\">after main: destructor is called..</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>说起这个属性，要从fio的vpp说起，引擎的注册函数fio_libaio_register与反注册函数fio_libaio_unregister都没有其他函数调用，而fio又没有以动态库的形式将这两个函数供别的地方使用,但是这两个函数有宏定义fio_init和fio_exit来修饰。这个两个个宏定义为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fio_init __attribute__((constructor))  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fio_exit __attribute__((destructor))</span></span><br></pre></td></tr></table></figure></p>\n<p>以如下构造函数为例,这是vpp中的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VLIB_DECLARE_INIT_FUNCTION(x, tag)                      \\</span></span><br><span class=\"line\"><span class=\"keyword\">vlib_init_function_t</span> * _VLIB_INIT_FUNCTION_SYMBOL (x, tag) = x; \\</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __vlib_add_#<span class=\"meta\">#tag##_function_##x (void)              \\</span></span><br><span class=\"line\">    __attribute__((__constructor__)) ;                          \\</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __vlib_add_#<span class=\"meta\">#tag##_function_##x (void)              \\</span></span><br><span class=\"line\">&#123;                                                               \\</span><br><span class=\"line\"> <span class=\"keyword\">vlib_main_t</span> * vm = vlib_get_main();                            \\</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">_vlib_init_function_list_elt_t</span> _vlib_init_function;     \\</span><br><span class=\"line\"> _vlib_init_function.next_init_function                         \\</span><br><span class=\"line\">    = vm-&gt;tag##_function_registrations;                         \\</span><br><span class=\"line\">  vm-&gt;tag##_function_registrations = &amp;_vlib_init_function;      \\</span><br><span class=\"line\"> _vlib_init_function.f = &amp;x;                                    \\</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个两个属性是gcc提供的属性，在dpdk中也有体现。若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。若函数被设定为destructor属性，则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。通过如下测试代码，能更加清晰地认识到这两个属性的作用：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> __attribute__((constructor)) con_func()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"befor main: constructor is called..\\n\"</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">void</span> __attribute__((destructor)) des_func()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"after main: destructor is called..\\n\"</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"main func..\\n\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">befor main: constructor is called..  </span><br><span class=\"line\">main func..  </span><br><span class=\"line\">after main: destructor is called..</span><br></pre></td></tr></table></figure></p>\n"},{"title":"vim备忘录","_content":"\n# C语言VIM设置\n```\n:set nu \"设置显示行号  \n:set bg=dark \"背景色设置  \n:set cindent \"设置c语言自动对齐  \n:set history=1000 \"设置历史记录条数  \n:set ts=4\t\"设置tab对应空格数\n:set expandtab \"vim 里面按下tab 会自动替换为4个空格\n```\n\n# tab和空格替换\n```\nTAB替换为空格：\n:set ts=4\n:set expandtab\n:%retab!\n\n空格替换为TAB：\n:set ts=4\n:set noexpandtab\n:%retab!\n```\n\n# VIM代码格式化\n## astyle\nastyle是款代码格式化工具，具体使用参考官网：http://astyle.sourceforge.net/\n\n## astyle和vim整合\n在和vim整合之前，首先应保证astyle成功安装，并可用。\nvim具有掉外部命令的能力，因此可以在.vimrc中添加如下代码，编辑完成后，按F2即可对代码进行格式。\n```\nmap <F2> :call FormatCode()<CR>\nfunc! FormatCode()\n    exec \"w\"\n    if &filetype == 'c' || &filetype == 'h'\n        exec \"!astyle --style=linux --suffix=none %\"\n    elseif &filetype == 'cpp' || &filetype == 'cc' || &filetype == 'hpp'\n        exec \"!astyle --style=linux --suffix=none %\"\n    elseif &filetype == 'perl'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    elseif &filetype == 'py'|| &filetype == 'python'\n        exec \"!autopep8 --in-place --aggressive %\"\n    elseif &filetype == 'java'\n        exec \"!astyle --style=java --suffix=none %\"\n    elseif &filetype == 'jsp'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    elseif &filetype == 'xml'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    else\n        exec \"normal gg=G\"\n        return\n    endif\nendfunc\n```","source":"_posts/vim备忘录.md","raw":"---\ntitle: vim备忘录\ncategories: 备忘录\ntags:\n  - vim\n---\n\n# C语言VIM设置\n```\n:set nu \"设置显示行号  \n:set bg=dark \"背景色设置  \n:set cindent \"设置c语言自动对齐  \n:set history=1000 \"设置历史记录条数  \n:set ts=4\t\"设置tab对应空格数\n:set expandtab \"vim 里面按下tab 会自动替换为4个空格\n```\n\n# tab和空格替换\n```\nTAB替换为空格：\n:set ts=4\n:set expandtab\n:%retab!\n\n空格替换为TAB：\n:set ts=4\n:set noexpandtab\n:%retab!\n```\n\n# VIM代码格式化\n## astyle\nastyle是款代码格式化工具，具体使用参考官网：http://astyle.sourceforge.net/\n\n## astyle和vim整合\n在和vim整合之前，首先应保证astyle成功安装，并可用。\nvim具有掉外部命令的能力，因此可以在.vimrc中添加如下代码，编辑完成后，按F2即可对代码进行格式。\n```\nmap <F2> :call FormatCode()<CR>\nfunc! FormatCode()\n    exec \"w\"\n    if &filetype == 'c' || &filetype == 'h'\n        exec \"!astyle --style=linux --suffix=none %\"\n    elseif &filetype == 'cpp' || &filetype == 'cc' || &filetype == 'hpp'\n        exec \"!astyle --style=linux --suffix=none %\"\n    elseif &filetype == 'perl'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    elseif &filetype == 'py'|| &filetype == 'python'\n        exec \"!autopep8 --in-place --aggressive %\"\n    elseif &filetype == 'java'\n        exec \"!astyle --style=java --suffix=none %\"\n    elseif &filetype == 'jsp'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    elseif &filetype == 'xml'\n        exec \"!astyle --style=gnu --suffix=none %\"\n    else\n        exec \"normal gg=G\"\n        return\n    endif\nendfunc\n```","slug":"vim备忘录","published":1,"date":"2018-03-15T06:37:49.449Z","updated":"2018-03-20T03:05:18.842Z","_id":"cjes5cy470000ssjhp8qf3c3n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"C语言VIM设置\"><a href=\"#C语言VIM设置\" class=\"headerlink\" title=\"C语言VIM设置\"></a>C语言VIM设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set nu &quot;设置显示行号  </span><br><span class=\"line\">:set bg=dark &quot;背景色设置  </span><br><span class=\"line\">:set cindent &quot;设置c语言自动对齐  </span><br><span class=\"line\">:set history=1000 &quot;设置历史记录条数  </span><br><span class=\"line\">:set ts=4\t&quot;设置tab对应空格数</span><br><span class=\"line\">:set expandtab &quot;vim 里面按下tab 会自动替换为4个空格</span><br></pre></td></tr></table></figure>\n<h1 id=\"tab和空格替换\"><a href=\"#tab和空格替换\" class=\"headerlink\" title=\"tab和空格替换\"></a>tab和空格替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TAB替换为空格：</span><br><span class=\"line\">:set ts=4</span><br><span class=\"line\">:set expandtab</span><br><span class=\"line\">:%retab!</span><br><span class=\"line\"></span><br><span class=\"line\">空格替换为TAB：</span><br><span class=\"line\">:set ts=4</span><br><span class=\"line\">:set noexpandtab</span><br><span class=\"line\">:%retab!</span><br></pre></td></tr></table></figure>\n<h1 id=\"VIM代码格式化\"><a href=\"#VIM代码格式化\" class=\"headerlink\" title=\"VIM代码格式化\"></a>VIM代码格式化</h1><h2 id=\"astyle\"><a href=\"#astyle\" class=\"headerlink\" title=\"astyle\"></a>astyle</h2><p>astyle是款代码格式化工具，具体使用参考官网：<a href=\"http://astyle.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://astyle.sourceforge.net/</a></p>\n<h2 id=\"astyle和vim整合\"><a href=\"#astyle和vim整合\" class=\"headerlink\" title=\"astyle和vim整合\"></a>astyle和vim整合</h2><p>在和vim整合之前，首先应保证astyle成功安装，并可用。<br>vim具有掉外部命令的能力，因此可以在.vimrc中添加如下代码，编辑完成后，按F2即可对代码进行格式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map &lt;F2&gt; :call FormatCode()&lt;CR&gt;</span><br><span class=\"line\">func! FormatCode()</span><br><span class=\"line\">    exec &quot;w&quot;</span><br><span class=\"line\">    if &amp;filetype == &apos;c&apos; || &amp;filetype == &apos;h&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=linux --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;cpp&apos; || &amp;filetype == &apos;cc&apos; || &amp;filetype == &apos;hpp&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=linux --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;perl&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;py&apos;|| &amp;filetype == &apos;python&apos;</span><br><span class=\"line\">        exec &quot;!autopep8 --in-place --aggressive %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;java&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=java --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;jsp&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;xml&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        exec &quot;normal gg=G&quot;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    endif</span><br><span class=\"line\">endfunc</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C语言VIM设置\"><a href=\"#C语言VIM设置\" class=\"headerlink\" title=\"C语言VIM设置\"></a>C语言VIM设置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set nu &quot;设置显示行号  </span><br><span class=\"line\">:set bg=dark &quot;背景色设置  </span><br><span class=\"line\">:set cindent &quot;设置c语言自动对齐  </span><br><span class=\"line\">:set history=1000 &quot;设置历史记录条数  </span><br><span class=\"line\">:set ts=4\t&quot;设置tab对应空格数</span><br><span class=\"line\">:set expandtab &quot;vim 里面按下tab 会自动替换为4个空格</span><br></pre></td></tr></table></figure>\n<h1 id=\"tab和空格替换\"><a href=\"#tab和空格替换\" class=\"headerlink\" title=\"tab和空格替换\"></a>tab和空格替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TAB替换为空格：</span><br><span class=\"line\">:set ts=4</span><br><span class=\"line\">:set expandtab</span><br><span class=\"line\">:%retab!</span><br><span class=\"line\"></span><br><span class=\"line\">空格替换为TAB：</span><br><span class=\"line\">:set ts=4</span><br><span class=\"line\">:set noexpandtab</span><br><span class=\"line\">:%retab!</span><br></pre></td></tr></table></figure>\n<h1 id=\"VIM代码格式化\"><a href=\"#VIM代码格式化\" class=\"headerlink\" title=\"VIM代码格式化\"></a>VIM代码格式化</h1><h2 id=\"astyle\"><a href=\"#astyle\" class=\"headerlink\" title=\"astyle\"></a>astyle</h2><p>astyle是款代码格式化工具，具体使用参考官网：<a href=\"http://astyle.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://astyle.sourceforge.net/</a></p>\n<h2 id=\"astyle和vim整合\"><a href=\"#astyle和vim整合\" class=\"headerlink\" title=\"astyle和vim整合\"></a>astyle和vim整合</h2><p>在和vim整合之前，首先应保证astyle成功安装，并可用。<br>vim具有掉外部命令的能力，因此可以在.vimrc中添加如下代码，编辑完成后，按F2即可对代码进行格式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map &lt;F2&gt; :call FormatCode()&lt;CR&gt;</span><br><span class=\"line\">func! FormatCode()</span><br><span class=\"line\">    exec &quot;w&quot;</span><br><span class=\"line\">    if &amp;filetype == &apos;c&apos; || &amp;filetype == &apos;h&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=linux --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;cpp&apos; || &amp;filetype == &apos;cc&apos; || &amp;filetype == &apos;hpp&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=linux --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;perl&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;py&apos;|| &amp;filetype == &apos;python&apos;</span><br><span class=\"line\">        exec &quot;!autopep8 --in-place --aggressive %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;java&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=java --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;jsp&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    elseif &amp;filetype == &apos;xml&apos;</span><br><span class=\"line\">        exec &quot;!astyle --style=gnu --suffix=none %&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        exec &quot;normal gg=G&quot;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    endif</span><br><span class=\"line\">endfunc</span><br></pre></td></tr></table></figure></p>\n"},{"title":"makefile备忘录","_content":"\n# Makefile 中:= ?= += =的区别\n在Makefile中我们经常看到 = := ?= +=这几个赋值运算符，那么他们有什么区别呢？我们来做个简单的实验\n\n新建一个Makefile，内容为：\n\n```\nifdef DEFINE_VRE\n    VRE = \"Hello World!\"\nelse\nendif\n\nifeq ($(OPT),define)\n    VRE ?= \"Hello World! First!\"\nendif\n\nifeq ($(OPT),add)\n    VRE += \"Kelly!\"\nendif\n\nifeq ($(OPT),recover)\n    VRE := \"Hello World! Again!\"\nendif\n\nall:\n    @echo $(VRE)\n```\n\n敲入以下make命令：\n```\nmake DEFINE_VRE=true OPT=define 输出：Hello World!\nmake DEFINE_VRE=true OPT=add 输出：Hello World! Kelly!\nmake DEFINE_VRE=true OPT=recover  输出：Hello World! Again!\nmake DEFINE_VRE= OPT=define 输出：Hello World! First!\nmake DEFINE_VRE= OPT=add 输出：Kelly!\nmake DEFINE_VRE= OPT=recover 输出：Hello World! Again!\n```\n从上面的结果中我们可以清楚的看到他们的区别了\n= 是最基本的赋值\n:= 是覆盖之前的值\n?= 是如果没有被赋值过就赋予等号后面的值\n+= 是添加等号后面的值\n\n","source":"_posts/makefile备忘录.md","raw":"---\ntitle: makefile备忘录\ncategories: 备忘录\ntags:\n  - makefil\n---\n\n# Makefile 中:= ?= += =的区别\n在Makefile中我们经常看到 = := ?= +=这几个赋值运算符，那么他们有什么区别呢？我们来做个简单的实验\n\n新建一个Makefile，内容为：\n\n```\nifdef DEFINE_VRE\n    VRE = \"Hello World!\"\nelse\nendif\n\nifeq ($(OPT),define)\n    VRE ?= \"Hello World! First!\"\nendif\n\nifeq ($(OPT),add)\n    VRE += \"Kelly!\"\nendif\n\nifeq ($(OPT),recover)\n    VRE := \"Hello World! Again!\"\nendif\n\nall:\n    @echo $(VRE)\n```\n\n敲入以下make命令：\n```\nmake DEFINE_VRE=true OPT=define 输出：Hello World!\nmake DEFINE_VRE=true OPT=add 输出：Hello World! Kelly!\nmake DEFINE_VRE=true OPT=recover  输出：Hello World! Again!\nmake DEFINE_VRE= OPT=define 输出：Hello World! First!\nmake DEFINE_VRE= OPT=add 输出：Kelly!\nmake DEFINE_VRE= OPT=recover 输出：Hello World! Again!\n```\n从上面的结果中我们可以清楚的看到他们的区别了\n= 是最基本的赋值\n:= 是覆盖之前的值\n?= 是如果没有被赋值过就赋予等号后面的值\n+= 是添加等号后面的值\n\n","slug":"makefile备忘录","published":1,"date":"2018-01-19T08:21:43.729Z","updated":"2018-02-13T03:18:28.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjes5cy510001ssjh3ah9qge4","content":"<h1 id=\"Makefile-中-的区别\"><a href=\"#Makefile-中-的区别\" class=\"headerlink\" title=\"Makefile 中:= ?= += =的区别\"></a>Makefile 中:= ?= += =的区别</h1><p>在Makefile中我们经常看到 = := ?= +=这几个赋值运算符，那么他们有什么区别呢？我们来做个简单的实验</p>\n<p>新建一个Makefile，内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifdef DEFINE_VRE</span><br><span class=\"line\">    VRE = &quot;Hello World!&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),define)</span><br><span class=\"line\">    VRE ?= &quot;Hello World! First!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),add)</span><br><span class=\"line\">    VRE += &quot;Kelly!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),recover)</span><br><span class=\"line\">    VRE := &quot;Hello World! Again!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">all:</span><br><span class=\"line\">    @echo $(VRE)</span><br></pre></td></tr></table></figure>\n<p>敲入以下make命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make DEFINE_VRE=true OPT=define 输出：Hello World!</span><br><span class=\"line\">make DEFINE_VRE=true OPT=add 输出：Hello World! Kelly!</span><br><span class=\"line\">make DEFINE_VRE=true OPT=recover  输出：Hello World! Again!</span><br><span class=\"line\">make DEFINE_VRE= OPT=define 输出：Hello World! First!</span><br><span class=\"line\">make DEFINE_VRE= OPT=add 输出：Kelly!</span><br><span class=\"line\">make DEFINE_VRE= OPT=recover 输出：Hello World! Again!</span><br></pre></td></tr></table></figure></p>\n<p>从上面的结果中我们可以清楚的看到他们的区别了<br>= 是最基本的赋值<br>:= 是覆盖之前的值<br>?= 是如果没有被赋值过就赋予等号后面的值<br>+= 是添加等号后面的值</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Makefile-中-的区别\"><a href=\"#Makefile-中-的区别\" class=\"headerlink\" title=\"Makefile 中:= ?= += =的区别\"></a>Makefile 中:= ?= += =的区别</h1><p>在Makefile中我们经常看到 = := ?= +=这几个赋值运算符，那么他们有什么区别呢？我们来做个简单的实验</p>\n<p>新建一个Makefile，内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifdef DEFINE_VRE</span><br><span class=\"line\">    VRE = &quot;Hello World!&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),define)</span><br><span class=\"line\">    VRE ?= &quot;Hello World! First!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),add)</span><br><span class=\"line\">    VRE += &quot;Kelly!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifeq ($(OPT),recover)</span><br><span class=\"line\">    VRE := &quot;Hello World! Again!&quot;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">all:</span><br><span class=\"line\">    @echo $(VRE)</span><br></pre></td></tr></table></figure>\n<p>敲入以下make命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make DEFINE_VRE=true OPT=define 输出：Hello World!</span><br><span class=\"line\">make DEFINE_VRE=true OPT=add 输出：Hello World! Kelly!</span><br><span class=\"line\">make DEFINE_VRE=true OPT=recover  输出：Hello World! Again!</span><br><span class=\"line\">make DEFINE_VRE= OPT=define 输出：Hello World! First!</span><br><span class=\"line\">make DEFINE_VRE= OPT=add 输出：Kelly!</span><br><span class=\"line\">make DEFINE_VRE= OPT=recover 输出：Hello World! Again!</span><br></pre></td></tr></table></figure></p>\n<p>从上面的结果中我们可以清楚的看到他们的区别了<br>= 是最基本的赋值<br>:= 是覆盖之前的值<br>?= 是如果没有被赋值过就赋予等号后面的值<br>+= 是添加等号后面的值</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjei96og6000064jhzm60i1so","category_id":"cjczxpjdu000sq0jhvir08nq9","_id":"cjei96ogr000564jhl6a7mocj"},{"post_id":"cjei96ogh000164jhi1i8midf","category_id":"cjczxpjdg000bq0jhqndnohuc","_id":"cjei96ogt000764jh111jg1im"},{"post_id":"cjei96ogn000364jhffsgkzg0","category_id":"cjczxpjdg000bq0jhqndnohuc","_id":"cjei96ogw000a64jh5v6uydqd"},{"post_id":"cjei96ogq000464jhncw9ltee","category_id":"cjczxpjds000nq0jh6dk5crg6","_id":"cjei96ogy000c64jhf2pyaban"},{"post_id":"cjei96ogu000964jh1x1f3bp0","category_id":"cjczxpjdg000bq0jhqndnohuc","_id":"cjei96oh3000h64jh6wm3hxp3"},{"post_id":"cjei96ogz000e64jhay829bef","category_id":"cjczxpjdg000bq0jhqndnohuc","_id":"cjei96oh5000l64jhj2z9usgo"},{"post_id":"cjei96oh2000g64jh9w18ze82","category_id":"cjczxpjcw0005q0jhakflxz1f","_id":"cjei96oh6000o64jhrbr32h0w"},{"post_id":"cjes5cy470000ssjhp8qf3c3n","category_id":"cjczxpjdu000sq0jhvir08nq9","_id":"cjes5cy570004ssjhq0ukwjg8"},{"post_id":"cjes5cy510001ssjh3ah9qge4","category_id":"cjczxpjdu000sq0jhvir08nq9","_id":"cjes5cy570005ssjho5xla66l"}],"PostTag":[{"post_id":"cjei96og6000064jhzm60i1so","tag_id":"cjei96ogl000264jhfiwx0vd6","_id":"cjei96oh5000k64jhn3w2ffgi"},{"post_id":"cjei96og6000064jhzm60i1so","tag_id":"cjei96ogu000864jhiebuhmmw","_id":"cjei96oh5000m64jhcu7ay4ht"},{"post_id":"cjei96og6000064jhzm60i1so","tag_id":"cjei96ogy000d64jhoc1kpi5g","_id":"cjei96oh6000p64jhp3v82g7s"},{"post_id":"cjei96ogh000164jhi1i8midf","tag_id":"cjei96oh4000i64jh42m9yiyh","_id":"cjei96oh9000s64jhwdnmyvkv"},{"post_id":"cjei96ogh000164jhi1i8midf","tag_id":"cjei96oh5000n64jhhektutu4","_id":"cjei96oh9000t64jhfs1vefco"},{"post_id":"cjei96ogh000164jhi1i8midf","tag_id":"cjei96oh7000q64jhi4ympsjg","_id":"cjei96oha000v64jha8zh6ekg"},{"post_id":"cjei96ogn000364jhffsgkzg0","tag_id":"cjei96oh4000i64jh42m9yiyh","_id":"cjei96ohc000y64jhfw010agk"},{"post_id":"cjei96ogn000364jhffsgkzg0","tag_id":"cjei96oh5000n64jhhektutu4","_id":"cjei96ohc000z64jhxx1rwk2j"},{"post_id":"cjei96ogn000364jhffsgkzg0","tag_id":"cjei96oh7000q64jhi4ympsjg","_id":"cjei96ohc001164jhq5jl6gyh"},{"post_id":"cjei96ogq000464jhncw9ltee","tag_id":"cjei96ohb000x64jhqgp3uqb5","_id":"cjei96ohd001264jhh7xzhk3i"},{"post_id":"cjei96ogu000964jh1x1f3bp0","tag_id":"cjei96oh4000i64jh42m9yiyh","_id":"cjei96ohf001864jhqohw8dji"},{"post_id":"cjei96ogu000964jh1x1f3bp0","tag_id":"cjei96oh5000n64jhhektutu4","_id":"cjei96ohf001964jhu1wxv2ye"},{"post_id":"cjei96ogu000964jh1x1f3bp0","tag_id":"cjei96oh7000q64jhi4ympsjg","_id":"cjei96ohg001b64jh55kcqsv0"},{"post_id":"cjei96ogz000e64jhay829bef","tag_id":"cjei96oh4000i64jh42m9yiyh","_id":"cjei96ohk001l64jh6rwmh7ok"},{"post_id":"cjei96ogz000e64jhay829bef","tag_id":"cjei96ohi001g64jh7qcy2y47","_id":"cjei96ohk001m64jhnz9adxgs"},{"post_id":"cjei96ogz000e64jhay829bef","tag_id":"cjei96ohi001i64jh6hxxqxan","_id":"cjei96ohk001n64jhqyxwujl2"},{"post_id":"cjei96ogz000e64jhay829bef","tag_id":"cjei96oh7000q64jhi4ympsjg","_id":"cjei96ohk001o64jhnsthi9ak"},{"post_id":"cjei96oh2000g64jh9w18ze82","tag_id":"cjei96ohj001k64jhlzxaltbw","_id":"cjei96ohl001p64jhky0yr4jh"},{"post_id":"cjes5cy470000ssjhp8qf3c3n","tag_id":"cjei96ohg001a64jhl0g4pn91","_id":"cjes5cy550002ssjh56magsiu"},{"post_id":"cjes5cy510001ssjh3ah9qge4","tag_id":"cjei96ohc001064jhjl6kyyy7","_id":"cjes5cy560003ssjhz2ezes0l"}],"Tag":[{"name":"container_of","_id":"cjei96ogl000264jhfiwx0vd6"},{"name":"linux","_id":"cjei96ogu000864jhiebuhmmw"},{"name":"链表","_id":"cjei96ogy000d64jhoc1kpi5g"},{"name":"网络转发","_id":"cjei96oh4000i64jh42m9yiyh"},{"name":"DPVS","_id":"cjei96oh5000n64jhhektutu4"},{"name":"DPDK","_id":"cjei96oh7000q64jhi4ympsjg"},{"name":"ospf","_id":"cjei96ohb000x64jhqgp3uqb5"},{"name":"makefil","_id":"cjei96ohc001064jhjl6kyyy7"},{"name":"astyle","_id":"cjei96ohf001764jh31k9736i"},{"name":"vim","_id":"cjei96ohg001a64jhl0g4pn91"},{"name":"代码格式化","_id":"cjei96ohg001c64jha1q4t8jp"},{"name":"令牌桶算法","_id":"cjei96ohi001g64jh7qcy2y47"},{"name":"多核限速","_id":"cjei96ohi001i64jh6hxxqxan"},{"name":"c语言","_id":"cjei96ohj001k64jhlzxaltbw"}]}}